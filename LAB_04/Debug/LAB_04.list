
LAB_04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f40  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800304c  0800304c  0001304c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003070  08003070  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08003070  08003070  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003070  08003070  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003070  08003070  00013070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003074  08003074  00013074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08003078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  20000064  080030dc  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  080030dc  00020430  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e26  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d97  00000000  00000000  00029eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  0002bc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  0002c738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017170  00000000  00000000  0002d100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca77  00000000  00000000  00044270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008255d  00000000  00000000  00050ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3244  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a6c  00000000  00000000  000d3298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08003034 	.word	0x08003034

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08003034 	.word	0x08003034

0800014c <isButtonPressed>:
int BUTTON[3]= {BUT1, BUT2, BUT3};
int TimeOutForKeyPress[NUM_BUTTON] = {500, 500, 500};
int button_long_pressed[NUM_BUTTON] = {0, 0, 0};
int button_flag[NUM_BUTTON] = {0, 0, 0};

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000080 	.word	0x20000080

08000180 <subKeyProcess>:
		return 1;
	}
	return 0;
}

void subKeyProcess(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]

	button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000080 	.word	0x20000080

080001a0 <getKeyInput>:

void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUTTON; i++) {
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e073      	b.n	8000294 <getKeyInput+0xf4>
		KeyReg2[i] = KeyReg1[i];
 80001ac:	4a3d      	ldr	r2, [pc, #244]	; (80002a4 <getKeyInput+0x104>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	493c      	ldr	r1, [pc, #240]	; (80002a8 <getKeyInput+0x108>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 80001bc:	4a3b      	ldr	r2, [pc, #236]	; (80002ac <getKeyInput+0x10c>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4937      	ldr	r1, [pc, #220]	; (80002a4 <getKeyInput+0x104>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, BUTTON[i]);
 80001cc:	4a38      	ldr	r2, [pc, #224]	; (80002b0 <getKeyInput+0x110>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001d4:	b29b      	uxth	r3, r3
 80001d6:	4619      	mov	r1, r3
 80001d8:	4836      	ldr	r0, [pc, #216]	; (80002b4 <getKeyInput+0x114>)
 80001da:	f001 feff 	bl	8001fdc <HAL_GPIO_ReadPin>
 80001de:	4603      	mov	r3, r0
 80001e0:	4619      	mov	r1, r3
 80001e2:	4a32      	ldr	r2, [pc, #200]	; (80002ac <getKeyInput+0x10c>)
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])) {
 80001ea:	4a2e      	ldr	r2, [pc, #184]	; (80002a4 <getKeyInput+0x104>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f2:	492e      	ldr	r1, [pc, #184]	; (80002ac <getKeyInput+0x10c>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d147      	bne.n	800028e <getKeyInput+0xee>
 80001fe:	4a29      	ldr	r2, [pc, #164]	; (80002a4 <getKeyInput+0x104>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000206:	4928      	ldr	r1, [pc, #160]	; (80002a8 <getKeyInput+0x108>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800020e:	429a      	cmp	r2, r3
 8000210:	d13d      	bne.n	800028e <getKeyInput+0xee>
			if (KeyReg2[i] != KeyReg3[i]) {
 8000212:	4a25      	ldr	r2, [pc, #148]	; (80002a8 <getKeyInput+0x108>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021a:	4927      	ldr	r1, [pc, #156]	; (80002b8 <getKeyInput+0x118>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000222:	429a      	cmp	r2, r3
 8000224:	d016      	beq.n	8000254 <getKeyInput+0xb4>
				KeyReg3[i] = KeyReg2[i];
 8000226:	4a20      	ldr	r2, [pc, #128]	; (80002a8 <getKeyInput+0x108>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022e:	4922      	ldr	r1, [pc, #136]	; (80002b8 <getKeyInput+0x118>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg3[i] == PRESSED_STATE) {
 8000236:	4a20      	ldr	r2, [pc, #128]	; (80002b8 <getKeyInput+0x118>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d125      	bne.n	800028e <getKeyInput+0xee>
					TimeOutForKeyPress[i] = 200;
 8000242:	4a1e      	ldr	r2, [pc, #120]	; (80002bc <getKeyInput+0x11c>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	21c8      	movs	r1, #200	; 0xc8
 8000248:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 800024c:	6878      	ldr	r0, [r7, #4]
 800024e:	f7ff ff97 	bl	8000180 <subKeyProcess>
 8000252:	e01c      	b.n	800028e <getKeyInput+0xee>
				}

			} else {
				TimeOutForKeyPress[i]--;
 8000254:	4a19      	ldr	r2, [pc, #100]	; (80002bc <getKeyInput+0x11c>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800025c:	1e5a      	subs	r2, r3, #1
 800025e:	4917      	ldr	r1, [pc, #92]	; (80002bc <getKeyInput+0x11c>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0) {
 8000266:	4a15      	ldr	r2, [pc, #84]	; (80002bc <getKeyInput+0x11c>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d10d      	bne.n	800028e <getKeyInput+0xee>
					TimeOutForKeyPress[i] = 200;
 8000272:	4a12      	ldr	r2, [pc, #72]	; (80002bc <getKeyInput+0x11c>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	21c8      	movs	r1, #200	; 0xc8
 8000278:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if (KeyReg3[i] == PRESSED_STATE) {
 800027c:	4a0e      	ldr	r2, [pc, #56]	; (80002b8 <getKeyInput+0x118>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d102      	bne.n	800028e <getKeyInput+0xee>
						subKeyProcess(i);
 8000288:	6878      	ldr	r0, [r7, #4]
 800028a:	f7ff ff79 	bl	8000180 <subKeyProcess>
	for (int i = 0; i < NUM_BUTTON; i++) {
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	3301      	adds	r3, #1
 8000292:	607b      	str	r3, [r7, #4]
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2b02      	cmp	r3, #2
 8000298:	dd88      	ble.n	80001ac <getKeyInput+0xc>
					}
				}
			}
		}
	}
}
 800029a:	bf00      	nop
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	2000000c 	.word	0x2000000c
 80002a8:	20000018 	.word	0x20000018
 80002ac:	20000000 	.word	0x20000000
 80002b0:	20000030 	.word	0x20000030
 80002b4:	40010800 	.word	0x40010800
 80002b8:	20000024 	.word	0x20000024
 80002bc:	2000003c 	.word	0x2000003c

080002c0 <fsm_automatic>:
 */

#include "fsm_automatic.h"

void fsm_automatic()
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	if(mode == MOD_AUTO){
 80002c4:	4b40      	ldr	r3, [pc, #256]	; (80003c8 <fsm_automatic+0x108>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	2b01      	cmp	r3, #1
 80002ca:	d16f      	bne.n	80003ac <fsm_automatic+0xec>
	switch (status){
 80002cc:	4b3f      	ldr	r3, [pc, #252]	; (80003cc <fsm_automatic+0x10c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	2b09      	cmp	r3, #9
 80002d2:	d86d      	bhi.n	80003b0 <fsm_automatic+0xf0>
 80002d4:	a201      	add	r2, pc, #4	; (adr r2, 80002dc <fsm_automatic+0x1c>)
 80002d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002da:	bf00      	nop
 80002dc:	08000305 	.word	0x08000305
 80002e0:	080003b1 	.word	0x080003b1
 80002e4:	080003b1 	.word	0x080003b1
 80002e8:	080003b1 	.word	0x080003b1
 80002ec:	080003b1 	.word	0x080003b1
 80002f0:	080003b1 	.word	0x080003b1
 80002f4:	0800030d 	.word	0x0800030d
 80002f8:	08000335 	.word	0x08000335
 80002fc:	0800035d 	.word	0x0800035d
 8000300:	08000385 	.word	0x08000385
	case MOD_INIT:
		status = RED_GREEN;
 8000304:	4b31      	ldr	r3, [pc, #196]	; (80003cc <fsm_automatic+0x10c>)
 8000306:	2206      	movs	r2, #6
 8000308:	601a      	str	r2, [r3, #0]
		break;
 800030a:	e05a      	b.n	80003c2 <fsm_automatic+0x102>
	case RED_GREEN:
		setRedAGreenB();
 800030c:	f001 fac6 	bl	800189c <setRedAGreenB>
		value++;
 8000310:	4b2f      	ldr	r3, [pc, #188]	; (80003d0 <fsm_automatic+0x110>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	3301      	adds	r3, #1
 8000316:	4a2e      	ldr	r2, [pc, #184]	; (80003d0 <fsm_automatic+0x110>)
 8000318:	6013      	str	r3, [r2, #0]
		if(value >= TIME_GREEN){
 800031a:	4b2d      	ldr	r3, [pc, #180]	; (80003d0 <fsm_automatic+0x110>)
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	4b2d      	ldr	r3, [pc, #180]	; (80003d4 <fsm_automatic+0x114>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	429a      	cmp	r2, r3
 8000324:	db46      	blt.n	80003b4 <fsm_automatic+0xf4>
			status = RED_YELLOW;
 8000326:	4b29      	ldr	r3, [pc, #164]	; (80003cc <fsm_automatic+0x10c>)
 8000328:	2207      	movs	r2, #7
 800032a:	601a      	str	r2, [r3, #0]
			value = 0;
 800032c:	4b28      	ldr	r3, [pc, #160]	; (80003d0 <fsm_automatic+0x110>)
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
		}
		break;
 8000332:	e03f      	b.n	80003b4 <fsm_automatic+0xf4>
	case RED_YELLOW:
		setRedAYellowB();
 8000334:	f001 fad6 	bl	80018e4 <setRedAYellowB>
		value++;
 8000338:	4b25      	ldr	r3, [pc, #148]	; (80003d0 <fsm_automatic+0x110>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	3301      	adds	r3, #1
 800033e:	4a24      	ldr	r2, [pc, #144]	; (80003d0 <fsm_automatic+0x110>)
 8000340:	6013      	str	r3, [r2, #0]
		if(value >= TIME_YELLOW){
 8000342:	4b23      	ldr	r3, [pc, #140]	; (80003d0 <fsm_automatic+0x110>)
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	4b24      	ldr	r3, [pc, #144]	; (80003d8 <fsm_automatic+0x118>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	429a      	cmp	r2, r3
 800034c:	db34      	blt.n	80003b8 <fsm_automatic+0xf8>
			status = GREEN_RED;
 800034e:	4b1f      	ldr	r3, [pc, #124]	; (80003cc <fsm_automatic+0x10c>)
 8000350:	2208      	movs	r2, #8
 8000352:	601a      	str	r2, [r3, #0]
			value = 0;
 8000354:	4b1e      	ldr	r3, [pc, #120]	; (80003d0 <fsm_automatic+0x110>)
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
		}
		break;
 800035a:	e02d      	b.n	80003b8 <fsm_automatic+0xf8>
	case GREEN_RED:
		setGreenARedB();
 800035c:	f001 fae6 	bl	800192c <setGreenARedB>
		value++;
 8000360:	4b1b      	ldr	r3, [pc, #108]	; (80003d0 <fsm_automatic+0x110>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	3301      	adds	r3, #1
 8000366:	4a1a      	ldr	r2, [pc, #104]	; (80003d0 <fsm_automatic+0x110>)
 8000368:	6013      	str	r3, [r2, #0]
		if(value >= TIME_GREEN){
 800036a:	4b19      	ldr	r3, [pc, #100]	; (80003d0 <fsm_automatic+0x110>)
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	4b19      	ldr	r3, [pc, #100]	; (80003d4 <fsm_automatic+0x114>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	429a      	cmp	r2, r3
 8000374:	db22      	blt.n	80003bc <fsm_automatic+0xfc>
			status = YELLOW_RED;
 8000376:	4b15      	ldr	r3, [pc, #84]	; (80003cc <fsm_automatic+0x10c>)
 8000378:	2209      	movs	r2, #9
 800037a:	601a      	str	r2, [r3, #0]
			value = 0;
 800037c:	4b14      	ldr	r3, [pc, #80]	; (80003d0 <fsm_automatic+0x110>)
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
		}
		break;
 8000382:	e01b      	b.n	80003bc <fsm_automatic+0xfc>
	case YELLOW_RED:
		setYellowARedB();
 8000384:	f001 faf6 	bl	8001974 <setYellowARedB>
		value++;
 8000388:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <fsm_automatic+0x110>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	3301      	adds	r3, #1
 800038e:	4a10      	ldr	r2, [pc, #64]	; (80003d0 <fsm_automatic+0x110>)
 8000390:	6013      	str	r3, [r2, #0]
		if(value >= TIME_YELLOW){
 8000392:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <fsm_automatic+0x110>)
 8000394:	681a      	ldr	r2, [r3, #0]
 8000396:	4b10      	ldr	r3, [pc, #64]	; (80003d8 <fsm_automatic+0x118>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	429a      	cmp	r2, r3
 800039c:	db10      	blt.n	80003c0 <fsm_automatic+0x100>
			status = RED_GREEN;
 800039e:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <fsm_automatic+0x10c>)
 80003a0:	2206      	movs	r2, #6
 80003a2:	601a      	str	r2, [r3, #0]
			value = 0;
 80003a4:	4b0a      	ldr	r3, [pc, #40]	; (80003d0 <fsm_automatic+0x110>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
		}
		break;
 80003aa:	e009      	b.n	80003c0 <fsm_automatic+0x100>
	default:
		break;

		}
	}
 80003ac:	bf00      	nop
 80003ae:	e008      	b.n	80003c2 <fsm_automatic+0x102>
		break;
 80003b0:	bf00      	nop
 80003b2:	e006      	b.n	80003c2 <fsm_automatic+0x102>
		break;
 80003b4:	bf00      	nop
 80003b6:	e004      	b.n	80003c2 <fsm_automatic+0x102>
		break;
 80003b8:	bf00      	nop
 80003ba:	e002      	b.n	80003c2 <fsm_automatic+0x102>
		break;
 80003bc:	bf00      	nop
 80003be:	e000      	b.n	80003c2 <fsm_automatic+0x102>
		break;
 80003c0:	bf00      	nop
}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	20000048 	.word	0x20000048
 80003cc:	20000090 	.word	0x20000090
 80003d0:	20000098 	.word	0x20000098
 80003d4:	20000054 	.word	0x20000054
 80003d8:	20000050 	.word	0x20000050

080003dc <modifyMode>:
 *      Author: HOANGANH
 */

#include "fsm_manual.h"

void modifyMode(int temp){
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	static int num = 0;
	switch(num){
 80003e4:	4b23      	ldr	r3, [pc, #140]	; (8000474 <modifyMode+0x98>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d002      	beq.n	80003f2 <modifyMode+0x16>
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d019      	beq.n	8000424 <modifyMode+0x48>
    	display7SEG_horizontal(temp%10);
        display7SEG_vertical(mode%10);
        num = 0;
		break;
	default:
		break;
 80003f0:	e03b      	b.n	800046a <modifyMode+0x8e>
    	display7SEG_horizontal(temp/10);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4a20      	ldr	r2, [pc, #128]	; (8000478 <modifyMode+0x9c>)
 80003f6:	fb82 1203 	smull	r1, r2, r2, r3
 80003fa:	1092      	asrs	r2, r2, #2
 80003fc:	17db      	asrs	r3, r3, #31
 80003fe:	1ad3      	subs	r3, r2, r3
 8000400:	4618      	mov	r0, r3
 8000402:	f000 f92d 	bl	8000660 <display7SEG_horizontal>
        display7SEG_vertical(mode/10);
 8000406:	4b1d      	ldr	r3, [pc, #116]	; (800047c <modifyMode+0xa0>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a1b      	ldr	r2, [pc, #108]	; (8000478 <modifyMode+0x9c>)
 800040c:	fb82 1203 	smull	r1, r2, r2, r3
 8000410:	1092      	asrs	r2, r2, #2
 8000412:	17db      	asrs	r3, r3, #31
 8000414:	1ad3      	subs	r3, r2, r3
 8000416:	4618      	mov	r0, r3
 8000418:	f000 fab0 	bl	800097c <display7SEG_vertical>
        num = 1;
 800041c:	4b15      	ldr	r3, [pc, #84]	; (8000474 <modifyMode+0x98>)
 800041e:	2201      	movs	r2, #1
 8000420:	601a      	str	r2, [r3, #0]
		break;
 8000422:	e022      	b.n	800046a <modifyMode+0x8e>
    	display7SEG_horizontal(temp%10);
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	4b14      	ldr	r3, [pc, #80]	; (8000478 <modifyMode+0x9c>)
 8000428:	fb83 1302 	smull	r1, r3, r3, r2
 800042c:	1099      	asrs	r1, r3, #2
 800042e:	17d3      	asrs	r3, r2, #31
 8000430:	1ac9      	subs	r1, r1, r3
 8000432:	460b      	mov	r3, r1
 8000434:	009b      	lsls	r3, r3, #2
 8000436:	440b      	add	r3, r1
 8000438:	005b      	lsls	r3, r3, #1
 800043a:	1ad1      	subs	r1, r2, r3
 800043c:	4608      	mov	r0, r1
 800043e:	f000 f90f 	bl	8000660 <display7SEG_horizontal>
        display7SEG_vertical(mode%10);
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <modifyMode+0xa0>)
 8000444:	681a      	ldr	r2, [r3, #0]
 8000446:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <modifyMode+0x9c>)
 8000448:	fb83 1302 	smull	r1, r3, r3, r2
 800044c:	1099      	asrs	r1, r3, #2
 800044e:	17d3      	asrs	r3, r2, #31
 8000450:	1ac9      	subs	r1, r1, r3
 8000452:	460b      	mov	r3, r1
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	440b      	add	r3, r1
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	1ad1      	subs	r1, r2, r3
 800045c:	4608      	mov	r0, r1
 800045e:	f000 fa8d 	bl	800097c <display7SEG_vertical>
        num = 0;
 8000462:	4b04      	ldr	r3, [pc, #16]	; (8000474 <modifyMode+0x98>)
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
		break;
 8000468:	bf00      	nop

	}
}
 800046a:	bf00      	nop
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	2000008c 	.word	0x2000008c
 8000478:	66666667 	.word	0x66666667
 800047c:	20000048 	.word	0x20000048

08000480 <fsm_manual>:


void fsm_manual(){
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	switch(mode){
 8000484:	4b6c      	ldr	r3, [pc, #432]	; (8000638 <fsm_manual+0x1b8>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	3b01      	subs	r3, #1
 800048a:	2b03      	cmp	r3, #3
 800048c:	f200 80c9 	bhi.w	8000622 <fsm_manual+0x1a2>
 8000490:	a201      	add	r2, pc, #4	; (adr r2, 8000498 <fsm_manual+0x18>)
 8000492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000496:	bf00      	nop
 8000498:	080004a9 	.word	0x080004a9
 800049c:	080004cb 	.word	0x080004cb
 80004a0:	0800052d 	.word	0x0800052d
 80004a4:	0800058d 	.word	0x0800058d
		case MOD_AUTO:
			if(isButtonPressed(0) == 1){
 80004a8:	2000      	movs	r0, #0
 80004aa:	f7ff fe4f 	bl	800014c <isButtonPressed>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	f040 80b8 	bne.w	8000626 <fsm_manual+0x1a6>
			mode = MOD_RED;
 80004b6:	4b60      	ldr	r3, [pc, #384]	; (8000638 <fsm_manual+0x1b8>)
 80004b8:	2202      	movs	r2, #2
 80004ba:	601a      	str	r2, [r3, #0]
			status = MOD_INIT;
 80004bc:	4b5f      	ldr	r3, [pc, #380]	; (800063c <fsm_manual+0x1bc>)
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
			value = 0;
 80004c2:	4b5f      	ldr	r3, [pc, #380]	; (8000640 <fsm_manual+0x1c0>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
			}
			break;
 80004c8:	e0ad      	b.n	8000626 <fsm_manual+0x1a6>
		case MOD_RED:
			modifyMode(TIME_RED_tmp);
 80004ca:	4b5e      	ldr	r3, [pc, #376]	; (8000644 <fsm_manual+0x1c4>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4618      	mov	r0, r3
 80004d0:	f7ff ff84 	bl	80003dc <modifyMode>
			toggleAllRed();
 80004d4:	f001 f97c 	bl	80017d0 <toggleAllRed>

			if(isButtonPressed(0) == 1){
 80004d8:	2000      	movs	r0, #0
 80004da:	f7ff fe37 	bl	800014c <isButtonPressed>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d105      	bne.n	80004f0 <fsm_manual+0x70>
				mode = MOD_YELLOW;
 80004e4:	4b54      	ldr	r3, [pc, #336]	; (8000638 <fsm_manual+0x1b8>)
 80004e6:	2203      	movs	r2, #3
 80004e8:	601a      	str	r2, [r3, #0]
				TIME_RED_tmp = 0;
 80004ea:	4b56      	ldr	r3, [pc, #344]	; (8000644 <fsm_manual+0x1c4>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
			}

			if(isButtonPressed(1) == 1){
 80004f0:	2001      	movs	r0, #1
 80004f2:	f7ff fe2b 	bl	800014c <isButtonPressed>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d10b      	bne.n	8000514 <fsm_manual+0x94>
				TIME_RED_tmp++;
 80004fc:	4b51      	ldr	r3, [pc, #324]	; (8000644 <fsm_manual+0x1c4>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	3301      	adds	r3, #1
 8000502:	4a50      	ldr	r2, [pc, #320]	; (8000644 <fsm_manual+0x1c4>)
 8000504:	6013      	str	r3, [r2, #0]
				if(TIME_RED_tmp > 99){
 8000506:	4b4f      	ldr	r3, [pc, #316]	; (8000644 <fsm_manual+0x1c4>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2b63      	cmp	r3, #99	; 0x63
 800050c:	dd02      	ble.n	8000514 <fsm_manual+0x94>
					TIME_RED_tmp = 1;
 800050e:	4b4d      	ldr	r3, [pc, #308]	; (8000644 <fsm_manual+0x1c4>)
 8000510:	2201      	movs	r2, #1
 8000512:	601a      	str	r2, [r3, #0]
				}
			}

			if(isButtonPressed(2) == 1){
 8000514:	2002      	movs	r0, #2
 8000516:	f7ff fe19 	bl	800014c <isButtonPressed>
 800051a:	4603      	mov	r3, r0
 800051c:	2b01      	cmp	r3, #1
 800051e:	f040 8084 	bne.w	800062a <fsm_manual+0x1aa>
				TIME_RED = TIME_RED_tmp;
 8000522:	4b48      	ldr	r3, [pc, #288]	; (8000644 <fsm_manual+0x1c4>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a48      	ldr	r2, [pc, #288]	; (8000648 <fsm_manual+0x1c8>)
 8000528:	6013      	str	r3, [r2, #0]
			}
			break;
 800052a:	e07e      	b.n	800062a <fsm_manual+0x1aa>
		case MOD_YELLOW:
			modifyMode(TIME_YELLOW_tmp);
 800052c:	4b47      	ldr	r3, [pc, #284]	; (800064c <fsm_manual+0x1cc>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff ff53 	bl	80003dc <modifyMode>
			toggleAllYellow();
 8000536:	f001 f98f 	bl	8001858 <toggleAllYellow>

			if(isButtonPressed(0) == 1){
 800053a:	2000      	movs	r0, #0
 800053c:	f7ff fe06 	bl	800014c <isButtonPressed>
 8000540:	4603      	mov	r3, r0
 8000542:	2b01      	cmp	r3, #1
 8000544:	d105      	bne.n	8000552 <fsm_manual+0xd2>
				mode = MOD_GREEN;
 8000546:	4b3c      	ldr	r3, [pc, #240]	; (8000638 <fsm_manual+0x1b8>)
 8000548:	2204      	movs	r2, #4
 800054a:	601a      	str	r2, [r3, #0]
				TIME_YELLOW_tmp = 0;
 800054c:	4b3f      	ldr	r3, [pc, #252]	; (800064c <fsm_manual+0x1cc>)
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
			}

			if(isButtonPressed(1) == 1){
 8000552:	2001      	movs	r0, #1
 8000554:	f7ff fdfa 	bl	800014c <isButtonPressed>
 8000558:	4603      	mov	r3, r0
 800055a:	2b01      	cmp	r3, #1
 800055c:	d10b      	bne.n	8000576 <fsm_manual+0xf6>
				TIME_YELLOW_tmp++;
 800055e:	4b3b      	ldr	r3, [pc, #236]	; (800064c <fsm_manual+0x1cc>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	3301      	adds	r3, #1
 8000564:	4a39      	ldr	r2, [pc, #228]	; (800064c <fsm_manual+0x1cc>)
 8000566:	6013      	str	r3, [r2, #0]
				if(TIME_YELLOW_tmp > 99){
 8000568:	4b38      	ldr	r3, [pc, #224]	; (800064c <fsm_manual+0x1cc>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b63      	cmp	r3, #99	; 0x63
 800056e:	dd02      	ble.n	8000576 <fsm_manual+0xf6>
					TIME_YELLOW_tmp = 1;
 8000570:	4b36      	ldr	r3, [pc, #216]	; (800064c <fsm_manual+0x1cc>)
 8000572:	2201      	movs	r2, #1
 8000574:	601a      	str	r2, [r3, #0]
				}
			}

			if(isButtonPressed(2) == 1){
 8000576:	2002      	movs	r0, #2
 8000578:	f7ff fde8 	bl	800014c <isButtonPressed>
 800057c:	4603      	mov	r3, r0
 800057e:	2b01      	cmp	r3, #1
 8000580:	d155      	bne.n	800062e <fsm_manual+0x1ae>
				TIME_YELLOW = TIME_YELLOW_tmp;
 8000582:	4b32      	ldr	r3, [pc, #200]	; (800064c <fsm_manual+0x1cc>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a32      	ldr	r2, [pc, #200]	; (8000650 <fsm_manual+0x1d0>)
 8000588:	6013      	str	r3, [r2, #0]
			}
			break;
 800058a:	e050      	b.n	800062e <fsm_manual+0x1ae>
		case MOD_GREEN:
			modifyMode(TIME_GREEN_tmp);
 800058c:	4b31      	ldr	r3, [pc, #196]	; (8000654 <fsm_manual+0x1d4>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff ff23 	bl	80003dc <modifyMode>
			toggleAllGreen();
 8000596:	f001 f93d 	bl	8001814 <toggleAllGreen>

			if(isButtonPressed(0) == 1){
 800059a:	2000      	movs	r0, #0
 800059c:	f7ff fdd6 	bl	800014c <isButtonPressed>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d105      	bne.n	80005b2 <fsm_manual+0x132>
				mode = MOD_AUTO;
 80005a6:	4b24      	ldr	r3, [pc, #144]	; (8000638 <fsm_manual+0x1b8>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	601a      	str	r2, [r3, #0]
				TIME_GREEN_tmp = 0;
 80005ac:	4b29      	ldr	r3, [pc, #164]	; (8000654 <fsm_manual+0x1d4>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
			}

			if(isButtonPressed(1) == 1){
 80005b2:	2001      	movs	r0, #1
 80005b4:	f7ff fdca 	bl	800014c <isButtonPressed>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d10b      	bne.n	80005d6 <fsm_manual+0x156>
				TIME_GREEN_tmp++;
 80005be:	4b25      	ldr	r3, [pc, #148]	; (8000654 <fsm_manual+0x1d4>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3301      	adds	r3, #1
 80005c4:	4a23      	ldr	r2, [pc, #140]	; (8000654 <fsm_manual+0x1d4>)
 80005c6:	6013      	str	r3, [r2, #0]
				if(TIME_GREEN_tmp > 99){
 80005c8:	4b22      	ldr	r3, [pc, #136]	; (8000654 <fsm_manual+0x1d4>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b63      	cmp	r3, #99	; 0x63
 80005ce:	dd02      	ble.n	80005d6 <fsm_manual+0x156>
					TIME_GREEN_tmp = 1;
 80005d0:	4b20      	ldr	r3, [pc, #128]	; (8000654 <fsm_manual+0x1d4>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	601a      	str	r2, [r3, #0]
				}
			}

			if(isButtonPressed(2) == 1){
 80005d6:	2002      	movs	r0, #2
 80005d8:	f7ff fdb8 	bl	800014c <isButtonPressed>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d127      	bne.n	8000632 <fsm_manual+0x1b2>
				TIME_GREEN = TIME_GREEN_tmp;
 80005e2:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <fsm_manual+0x1d4>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a1c      	ldr	r2, [pc, #112]	; (8000658 <fsm_manual+0x1d8>)
 80005e8:	6013      	str	r3, [r2, #0]
				TIME_RED_tmp = TIME_GREEN_tmp + TIME_YELLOW_tmp;
 80005ea:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <fsm_manual+0x1d4>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <fsm_manual+0x1cc>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4413      	add	r3, r2
 80005f4:	4a13      	ldr	r2, [pc, #76]	; (8000644 <fsm_manual+0x1c4>)
 80005f6:	6013      	str	r3, [r2, #0]
//				if(TIME_RED_tmp == TIME_GREEN_tmp + TIME_YELLOW_tmp){
					TIME_RED = TIME_RED_tmp;
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <fsm_manual+0x1c4>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a12      	ldr	r2, [pc, #72]	; (8000648 <fsm_manual+0x1c8>)
 80005fe:	6013      	str	r3, [r2, #0]
					TIME_YELLOW = TIME_YELLOW_tmp;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <fsm_manual+0x1cc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a12      	ldr	r2, [pc, #72]	; (8000650 <fsm_manual+0x1d0>)
 8000606:	6013      	str	r3, [r2, #0]
					TIME_GREEN = TIME_GREEN_tmp;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <fsm_manual+0x1d4>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a12      	ldr	r2, [pc, #72]	; (8000658 <fsm_manual+0x1d8>)
 800060e:	6013      	str	r3, [r2, #0]
//				}
				updateBuffer();
 8000610:	f000 fbc6 	bl	8000da0 <updateBuffer>
				status = MOD_INIT;
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <fsm_manual+0x1bc>)
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
				status_system = 0;
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <fsm_manual+0x1dc>)
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
			}
			break;
 8000620:	e007      	b.n	8000632 <fsm_manual+0x1b2>

		default:
			break;
 8000622:	bf00      	nop
 8000624:	e006      	b.n	8000634 <fsm_manual+0x1b4>
			break;
 8000626:	bf00      	nop
 8000628:	e004      	b.n	8000634 <fsm_manual+0x1b4>
			break;
 800062a:	bf00      	nop
 800062c:	e002      	b.n	8000634 <fsm_manual+0x1b4>
			break;
 800062e:	bf00      	nop
 8000630:	e000      	b.n	8000634 <fsm_manual+0x1b4>
			break;
 8000632:	bf00      	nop
	}
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000048 	.word	0x20000048
 800063c:	20000090 	.word	0x20000090
 8000640:	20000098 	.word	0x20000098
 8000644:	2000009c 	.word	0x2000009c
 8000648:	2000004c 	.word	0x2000004c
 800064c:	200000a0 	.word	0x200000a0
 8000650:	20000050 	.word	0x20000050
 8000654:	200000a4 	.word	0x200000a4
 8000658:	20000054 	.word	0x20000054
 800065c:	20000094 	.word	0x20000094

08000660 <display7SEG_horizontal>:

#include "led7_segment.h"


void display7SEG_horizontal(int num)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b09      	cmp	r3, #9
 800066c:	f200 8180 	bhi.w	8000970 <display7SEG_horizontal+0x310>
 8000670:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <display7SEG_horizontal+0x18>)
 8000672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000676:	bf00      	nop
 8000678:	080006a1 	.word	0x080006a1
 800067c:	080006e9 	.word	0x080006e9
 8000680:	08000731 	.word	0x08000731
 8000684:	08000779 	.word	0x08000779
 8000688:	080007c1 	.word	0x080007c1
 800068c:	08000809 	.word	0x08000809
 8000690:	08000851 	.word	0x08000851
 8000694:	08000899 	.word	0x08000899
 8000698:	080008e1 	.word	0x080008e1
 800069c:	08000929 	.word	0x08000929
	switch(num){
	  case 0:
		  HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2101      	movs	r1, #1
 80006a4:	48b4      	ldr	r0, [pc, #720]	; (8000978 <display7SEG_horizontal+0x318>)
 80006a6:	f001 fcb0 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2102      	movs	r1, #2
 80006ae:	48b2      	ldr	r0, [pc, #712]	; (8000978 <display7SEG_horizontal+0x318>)
 80006b0:	f001 fcab 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2104      	movs	r1, #4
 80006b8:	48af      	ldr	r0, [pc, #700]	; (8000978 <display7SEG_horizontal+0x318>)
 80006ba:	f001 fca6 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2108      	movs	r1, #8
 80006c2:	48ad      	ldr	r0, [pc, #692]	; (8000978 <display7SEG_horizontal+0x318>)
 80006c4:	f001 fca1 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2110      	movs	r1, #16
 80006cc:	48aa      	ldr	r0, [pc, #680]	; (8000978 <display7SEG_horizontal+0x318>)
 80006ce:	f001 fc9c 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2120      	movs	r1, #32
 80006d6:	48a8      	ldr	r0, [pc, #672]	; (8000978 <display7SEG_horizontal+0x318>)
 80006d8:	f001 fc97 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_SET);
 80006dc:	2201      	movs	r2, #1
 80006de:	2140      	movs	r1, #64	; 0x40
 80006e0:	48a5      	ldr	r0, [pc, #660]	; (8000978 <display7SEG_horizontal+0x318>)
 80006e2:	f001 fc92 	bl	800200a <HAL_GPIO_WritePin>
		  break;
 80006e6:	e143      	b.n	8000970 <display7SEG_horizontal+0x310>
	  case 1:
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_SET);
 80006e8:	2201      	movs	r2, #1
 80006ea:	2101      	movs	r1, #1
 80006ec:	48a2      	ldr	r0, [pc, #648]	; (8000978 <display7SEG_horizontal+0x318>)
 80006ee:	f001 fc8c 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2102      	movs	r1, #2
 80006f6:	48a0      	ldr	r0, [pc, #640]	; (8000978 <display7SEG_horizontal+0x318>)
 80006f8:	f001 fc87 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2104      	movs	r1, #4
 8000700:	489d      	ldr	r0, [pc, #628]	; (8000978 <display7SEG_horizontal+0x318>)
 8000702:	f001 fc82 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_SET);
 8000706:	2201      	movs	r2, #1
 8000708:	2108      	movs	r1, #8
 800070a:	489b      	ldr	r0, [pc, #620]	; (8000978 <display7SEG_horizontal+0x318>)
 800070c:	f001 fc7d 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_SET);
 8000710:	2201      	movs	r2, #1
 8000712:	2110      	movs	r1, #16
 8000714:	4898      	ldr	r0, [pc, #608]	; (8000978 <display7SEG_horizontal+0x318>)
 8000716:	f001 fc78 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_SET);
 800071a:	2201      	movs	r2, #1
 800071c:	2120      	movs	r1, #32
 800071e:	4896      	ldr	r0, [pc, #600]	; (8000978 <display7SEG_horizontal+0x318>)
 8000720:	f001 fc73 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	2140      	movs	r1, #64	; 0x40
 8000728:	4893      	ldr	r0, [pc, #588]	; (8000978 <display7SEG_horizontal+0x318>)
 800072a:	f001 fc6e 	bl	800200a <HAL_GPIO_WritePin>
		  break;
 800072e:	e11f      	b.n	8000970 <display7SEG_horizontal+0x310>
	  case 2:
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	2101      	movs	r1, #1
 8000734:	4890      	ldr	r0, [pc, #576]	; (8000978 <display7SEG_horizontal+0x318>)
 8000736:	f001 fc68 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2102      	movs	r1, #2
 800073e:	488e      	ldr	r0, [pc, #568]	; (8000978 <display7SEG_horizontal+0x318>)
 8000740:	f001 fc63 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_SET);
 8000744:	2201      	movs	r2, #1
 8000746:	2104      	movs	r1, #4
 8000748:	488b      	ldr	r0, [pc, #556]	; (8000978 <display7SEG_horizontal+0x318>)
 800074a:	f001 fc5e 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2108      	movs	r1, #8
 8000752:	4889      	ldr	r0, [pc, #548]	; (8000978 <display7SEG_horizontal+0x318>)
 8000754:	f001 fc59 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	2110      	movs	r1, #16
 800075c:	4886      	ldr	r0, [pc, #536]	; (8000978 <display7SEG_horizontal+0x318>)
 800075e:	f001 fc54 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_SET);
 8000762:	2201      	movs	r2, #1
 8000764:	2120      	movs	r1, #32
 8000766:	4884      	ldr	r0, [pc, #528]	; (8000978 <display7SEG_horizontal+0x318>)
 8000768:	f001 fc4f 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	2140      	movs	r1, #64	; 0x40
 8000770:	4881      	ldr	r0, [pc, #516]	; (8000978 <display7SEG_horizontal+0x318>)
 8000772:	f001 fc4a 	bl	800200a <HAL_GPIO_WritePin>
		  break;
 8000776:	e0fb      	b.n	8000970 <display7SEG_horizontal+0x310>
	  case 3:
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	2101      	movs	r1, #1
 800077c:	487e      	ldr	r0, [pc, #504]	; (8000978 <display7SEG_horizontal+0x318>)
 800077e:	f001 fc44 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2102      	movs	r1, #2
 8000786:	487c      	ldr	r0, [pc, #496]	; (8000978 <display7SEG_horizontal+0x318>)
 8000788:	f001 fc3f 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	2104      	movs	r1, #4
 8000790:	4879      	ldr	r0, [pc, #484]	; (8000978 <display7SEG_horizontal+0x318>)
 8000792:	f001 fc3a 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2108      	movs	r1, #8
 800079a:	4877      	ldr	r0, [pc, #476]	; (8000978 <display7SEG_horizontal+0x318>)
 800079c:	f001 fc35 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_SET);
 80007a0:	2201      	movs	r2, #1
 80007a2:	2110      	movs	r1, #16
 80007a4:	4874      	ldr	r0, [pc, #464]	; (8000978 <display7SEG_horizontal+0x318>)
 80007a6:	f001 fc30 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_SET);
 80007aa:	2201      	movs	r2, #1
 80007ac:	2120      	movs	r1, #32
 80007ae:	4872      	ldr	r0, [pc, #456]	; (8000978 <display7SEG_horizontal+0x318>)
 80007b0:	f001 fc2b 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2140      	movs	r1, #64	; 0x40
 80007b8:	486f      	ldr	r0, [pc, #444]	; (8000978 <display7SEG_horizontal+0x318>)
 80007ba:	f001 fc26 	bl	800200a <HAL_GPIO_WritePin>
		  break;
 80007be:	e0d7      	b.n	8000970 <display7SEG_horizontal+0x310>
	  case 4:
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_SET);
 80007c0:	2201      	movs	r2, #1
 80007c2:	2101      	movs	r1, #1
 80007c4:	486c      	ldr	r0, [pc, #432]	; (8000978 <display7SEG_horizontal+0x318>)
 80007c6:	f001 fc20 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2102      	movs	r1, #2
 80007ce:	486a      	ldr	r0, [pc, #424]	; (8000978 <display7SEG_horizontal+0x318>)
 80007d0:	f001 fc1b 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2104      	movs	r1, #4
 80007d8:	4867      	ldr	r0, [pc, #412]	; (8000978 <display7SEG_horizontal+0x318>)
 80007da:	f001 fc16 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_SET);
 80007de:	2201      	movs	r2, #1
 80007e0:	2108      	movs	r1, #8
 80007e2:	4865      	ldr	r0, [pc, #404]	; (8000978 <display7SEG_horizontal+0x318>)
 80007e4:	f001 fc11 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2110      	movs	r1, #16
 80007ec:	4862      	ldr	r0, [pc, #392]	; (8000978 <display7SEG_horizontal+0x318>)
 80007ee:	f001 fc0c 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2120      	movs	r1, #32
 80007f6:	4860      	ldr	r0, [pc, #384]	; (8000978 <display7SEG_horizontal+0x318>)
 80007f8:	f001 fc07 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2140      	movs	r1, #64	; 0x40
 8000800:	485d      	ldr	r0, [pc, #372]	; (8000978 <display7SEG_horizontal+0x318>)
 8000802:	f001 fc02 	bl	800200a <HAL_GPIO_WritePin>
		  break;
 8000806:	e0b3      	b.n	8000970 <display7SEG_horizontal+0x310>
	  case 5:
		  HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2101      	movs	r1, #1
 800080c:	485a      	ldr	r0, [pc, #360]	; (8000978 <display7SEG_horizontal+0x318>)
 800080e:	f001 fbfc 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_SET);
 8000812:	2201      	movs	r2, #1
 8000814:	2102      	movs	r1, #2
 8000816:	4858      	ldr	r0, [pc, #352]	; (8000978 <display7SEG_horizontal+0x318>)
 8000818:	f001 fbf7 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	2104      	movs	r1, #4
 8000820:	4855      	ldr	r0, [pc, #340]	; (8000978 <display7SEG_horizontal+0x318>)
 8000822:	f001 fbf2 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2108      	movs	r1, #8
 800082a:	4853      	ldr	r0, [pc, #332]	; (8000978 <display7SEG_horizontal+0x318>)
 800082c:	f001 fbed 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	2110      	movs	r1, #16
 8000834:	4850      	ldr	r0, [pc, #320]	; (8000978 <display7SEG_horizontal+0x318>)
 8000836:	f001 fbe8 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2120      	movs	r1, #32
 800083e:	484e      	ldr	r0, [pc, #312]	; (8000978 <display7SEG_horizontal+0x318>)
 8000840:	f001 fbe3 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	2140      	movs	r1, #64	; 0x40
 8000848:	484b      	ldr	r0, [pc, #300]	; (8000978 <display7SEG_horizontal+0x318>)
 800084a:	f001 fbde 	bl	800200a <HAL_GPIO_WritePin>
		  break;
 800084e:	e08f      	b.n	8000970 <display7SEG_horizontal+0x310>
	  case 6:
		  HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	2101      	movs	r1, #1
 8000854:	4848      	ldr	r0, [pc, #288]	; (8000978 <display7SEG_horizontal+0x318>)
 8000856:	f001 fbd8 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_SET);
 800085a:	2201      	movs	r2, #1
 800085c:	2102      	movs	r1, #2
 800085e:	4846      	ldr	r0, [pc, #280]	; (8000978 <display7SEG_horizontal+0x318>)
 8000860:	f001 fbd3 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	2104      	movs	r1, #4
 8000868:	4843      	ldr	r0, [pc, #268]	; (8000978 <display7SEG_horizontal+0x318>)
 800086a:	f001 fbce 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2110      	movs	r1, #16
 8000872:	4841      	ldr	r0, [pc, #260]	; (8000978 <display7SEG_horizontal+0x318>)
 8000874:	f001 fbc9 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	2108      	movs	r1, #8
 800087c:	483e      	ldr	r0, [pc, #248]	; (8000978 <display7SEG_horizontal+0x318>)
 800087e:	f001 fbc4 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2120      	movs	r1, #32
 8000886:	483c      	ldr	r0, [pc, #240]	; (8000978 <display7SEG_horizontal+0x318>)
 8000888:	f001 fbbf 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	2140      	movs	r1, #64	; 0x40
 8000890:	4839      	ldr	r0, [pc, #228]	; (8000978 <display7SEG_horizontal+0x318>)
 8000892:	f001 fbba 	bl	800200a <HAL_GPIO_WritePin>
		  break;
 8000896:	e06b      	b.n	8000970 <display7SEG_horizontal+0x310>
	  case 7:
		  HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	2101      	movs	r1, #1
 800089c:	4836      	ldr	r0, [pc, #216]	; (8000978 <display7SEG_horizontal+0x318>)
 800089e:	f001 fbb4 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2102      	movs	r1, #2
 80008a6:	4834      	ldr	r0, [pc, #208]	; (8000978 <display7SEG_horizontal+0x318>)
 80008a8:	f001 fbaf 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2104      	movs	r1, #4
 80008b0:	4831      	ldr	r0, [pc, #196]	; (8000978 <display7SEG_horizontal+0x318>)
 80008b2:	f001 fbaa 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	2108      	movs	r1, #8
 80008ba:	482f      	ldr	r0, [pc, #188]	; (8000978 <display7SEG_horizontal+0x318>)
 80008bc:	f001 fba5 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	2110      	movs	r1, #16
 80008c4:	482c      	ldr	r0, [pc, #176]	; (8000978 <display7SEG_horizontal+0x318>)
 80008c6:	f001 fba0 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_SET);
 80008ca:	2201      	movs	r2, #1
 80008cc:	2120      	movs	r1, #32
 80008ce:	482a      	ldr	r0, [pc, #168]	; (8000978 <display7SEG_horizontal+0x318>)
 80008d0:	f001 fb9b 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	2140      	movs	r1, #64	; 0x40
 80008d8:	4827      	ldr	r0, [pc, #156]	; (8000978 <display7SEG_horizontal+0x318>)
 80008da:	f001 fb96 	bl	800200a <HAL_GPIO_WritePin>
		  break;
 80008de:	e047      	b.n	8000970 <display7SEG_horizontal+0x310>
	  case 8:
		  HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2101      	movs	r1, #1
 80008e4:	4824      	ldr	r0, [pc, #144]	; (8000978 <display7SEG_horizontal+0x318>)
 80008e6:	f001 fb90 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2102      	movs	r1, #2
 80008ee:	4822      	ldr	r0, [pc, #136]	; (8000978 <display7SEG_horizontal+0x318>)
 80008f0:	f001 fb8b 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2104      	movs	r1, #4
 80008f8:	481f      	ldr	r0, [pc, #124]	; (8000978 <display7SEG_horizontal+0x318>)
 80008fa:	f001 fb86 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2108      	movs	r1, #8
 8000902:	481d      	ldr	r0, [pc, #116]	; (8000978 <display7SEG_horizontal+0x318>)
 8000904:	f001 fb81 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	2110      	movs	r1, #16
 800090c:	481a      	ldr	r0, [pc, #104]	; (8000978 <display7SEG_horizontal+0x318>)
 800090e:	f001 fb7c 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2120      	movs	r1, #32
 8000916:	4818      	ldr	r0, [pc, #96]	; (8000978 <display7SEG_horizontal+0x318>)
 8000918:	f001 fb77 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	2140      	movs	r1, #64	; 0x40
 8000920:	4815      	ldr	r0, [pc, #84]	; (8000978 <display7SEG_horizontal+0x318>)
 8000922:	f001 fb72 	bl	800200a <HAL_GPIO_WritePin>
		  break;
 8000926:	e023      	b.n	8000970 <display7SEG_horizontal+0x310>
	  case 9:
		  HAL_GPIO_WritePin(GPIOB, SEG1_0, GPIO_PIN_RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	2101      	movs	r1, #1
 800092c:	4812      	ldr	r0, [pc, #72]	; (8000978 <display7SEG_horizontal+0x318>)
 800092e:	f001 fb6c 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_1, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	2102      	movs	r1, #2
 8000936:	4810      	ldr	r0, [pc, #64]	; (8000978 <display7SEG_horizontal+0x318>)
 8000938:	f001 fb67 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_2, GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	2104      	movs	r1, #4
 8000940:	480d      	ldr	r0, [pc, #52]	; (8000978 <display7SEG_horizontal+0x318>)
 8000942:	f001 fb62 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_3, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2108      	movs	r1, #8
 800094a:	480b      	ldr	r0, [pc, #44]	; (8000978 <display7SEG_horizontal+0x318>)
 800094c:	f001 fb5d 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_4, GPIO_PIN_SET);
 8000950:	2201      	movs	r2, #1
 8000952:	2110      	movs	r1, #16
 8000954:	4808      	ldr	r0, [pc, #32]	; (8000978 <display7SEG_horizontal+0x318>)
 8000956:	f001 fb58 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_5, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2120      	movs	r1, #32
 800095e:	4806      	ldr	r0, [pc, #24]	; (8000978 <display7SEG_horizontal+0x318>)
 8000960:	f001 fb53 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG1_6, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	2140      	movs	r1, #64	; 0x40
 8000968:	4803      	ldr	r0, [pc, #12]	; (8000978 <display7SEG_horizontal+0x318>)
 800096a:	f001 fb4e 	bl	800200a <HAL_GPIO_WritePin>
		  break;
 800096e:	bf00      	nop

	}
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40010c00 	.word	0x40010c00

0800097c <display7SEG_vertical>:

void display7SEG_vertical(int num)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2b09      	cmp	r3, #9
 8000988:	f200 81bc 	bhi.w	8000d04 <display7SEG_vertical+0x388>
 800098c:	a201      	add	r2, pc, #4	; (adr r2, 8000994 <display7SEG_vertical+0x18>)
 800098e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000992:	bf00      	nop
 8000994:	080009bd 	.word	0x080009bd
 8000998:	08000a11 	.word	0x08000a11
 800099c:	08000a65 	.word	0x08000a65
 80009a0:	08000ab9 	.word	0x08000ab9
 80009a4:	08000b0d 	.word	0x08000b0d
 80009a8:	08000b61 	.word	0x08000b61
 80009ac:	08000bb5 	.word	0x08000bb5
 80009b0:	08000c09 	.word	0x08000c09
 80009b4:	08000c5d 	.word	0x08000c5d
 80009b8:	08000cb1 	.word	0x08000cb1
	switch(num){
	  case 0:
		  HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	2180      	movs	r1, #128	; 0x80
 80009c0:	48d2      	ldr	r0, [pc, #840]	; (8000d0c <display7SEG_vertical+0x390>)
 80009c2:	f001 fb22 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009cc:	48cf      	ldr	r0, [pc, #828]	; (8000d0c <display7SEG_vertical+0x390>)
 80009ce:	f001 fb1c 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d8:	48cc      	ldr	r0, [pc, #816]	; (8000d0c <display7SEG_vertical+0x390>)
 80009da:	f001 fb16 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e4:	48c9      	ldr	r0, [pc, #804]	; (8000d0c <display7SEG_vertical+0x390>)
 80009e6:	f001 fb10 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009f0:	48c6      	ldr	r0, [pc, #792]	; (8000d0c <display7SEG_vertical+0x390>)
 80009f2:	f001 fb0a 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009fc:	48c3      	ldr	r0, [pc, #780]	; (8000d0c <display7SEG_vertical+0x390>)
 80009fe:	f001 fb04 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_SET);
 8000a02:	2201      	movs	r2, #1
 8000a04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a08:	48c0      	ldr	r0, [pc, #768]	; (8000d0c <display7SEG_vertical+0x390>)
 8000a0a:	f001 fafe 	bl	800200a <HAL_GPIO_WritePin>
		  break;
 8000a0e:	e179      	b.n	8000d04 <display7SEG_vertical+0x388>
	  case 1:
		  HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_SET);
 8000a10:	2201      	movs	r2, #1
 8000a12:	2180      	movs	r1, #128	; 0x80
 8000a14:	48bd      	ldr	r0, [pc, #756]	; (8000d0c <display7SEG_vertical+0x390>)
 8000a16:	f001 faf8 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a20:	48ba      	ldr	r0, [pc, #744]	; (8000d0c <display7SEG_vertical+0x390>)
 8000a22:	f001 faf2 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a2c:	48b7      	ldr	r0, [pc, #732]	; (8000d0c <display7SEG_vertical+0x390>)
 8000a2e:	f001 faec 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_SET);
 8000a32:	2201      	movs	r2, #1
 8000a34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a38:	48b4      	ldr	r0, [pc, #720]	; (8000d0c <display7SEG_vertical+0x390>)
 8000a3a:	f001 fae6 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_SET);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a44:	48b1      	ldr	r0, [pc, #708]	; (8000d0c <display7SEG_vertical+0x390>)
 8000a46:	f001 fae0 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a50:	48ae      	ldr	r0, [pc, #696]	; (8000d0c <display7SEG_vertical+0x390>)
 8000a52:	f001 fada 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_SET);
 8000a56:	2201      	movs	r2, #1
 8000a58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a5c:	48ab      	ldr	r0, [pc, #684]	; (8000d0c <display7SEG_vertical+0x390>)
 8000a5e:	f001 fad4 	bl	800200a <HAL_GPIO_WritePin>
		  break;
 8000a62:	e14f      	b.n	8000d04 <display7SEG_vertical+0x388>
	  case 2:
		  HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2180      	movs	r1, #128	; 0x80
 8000a68:	48a8      	ldr	r0, [pc, #672]	; (8000d0c <display7SEG_vertical+0x390>)
 8000a6a:	f001 face 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a74:	48a5      	ldr	r0, [pc, #660]	; (8000d0c <display7SEG_vertical+0x390>)
 8000a76:	f001 fac8 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_SET);
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a80:	48a2      	ldr	r0, [pc, #648]	; (8000d0c <display7SEG_vertical+0x390>)
 8000a82:	f001 fac2 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a8c:	489f      	ldr	r0, [pc, #636]	; (8000d0c <display7SEG_vertical+0x390>)
 8000a8e:	f001 fabc 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a98:	489c      	ldr	r0, [pc, #624]	; (8000d0c <display7SEG_vertical+0x390>)
 8000a9a:	f001 fab6 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_SET);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aa4:	4899      	ldr	r0, [pc, #612]	; (8000d0c <display7SEG_vertical+0x390>)
 8000aa6:	f001 fab0 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ab0:	4896      	ldr	r0, [pc, #600]	; (8000d0c <display7SEG_vertical+0x390>)
 8000ab2:	f001 faaa 	bl	800200a <HAL_GPIO_WritePin>
		  break;
 8000ab6:	e125      	b.n	8000d04 <display7SEG_vertical+0x388>
	  case 3:
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2180      	movs	r1, #128	; 0x80
 8000abc:	4893      	ldr	r0, [pc, #588]	; (8000d0c <display7SEG_vertical+0x390>)
 8000abe:	f001 faa4 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac8:	4890      	ldr	r0, [pc, #576]	; (8000d0c <display7SEG_vertical+0x390>)
 8000aca:	f001 fa9e 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ad4:	488d      	ldr	r0, [pc, #564]	; (8000d0c <display7SEG_vertical+0x390>)
 8000ad6:	f001 fa98 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae0:	488a      	ldr	r0, [pc, #552]	; (8000d0c <display7SEG_vertical+0x390>)
 8000ae2:	f001 fa92 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_SET);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aec:	4887      	ldr	r0, [pc, #540]	; (8000d0c <display7SEG_vertical+0x390>)
 8000aee:	f001 fa8c 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000af8:	4884      	ldr	r0, [pc, #528]	; (8000d0c <display7SEG_vertical+0x390>)
 8000afa:	f001 fa86 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b04:	4881      	ldr	r0, [pc, #516]	; (8000d0c <display7SEG_vertical+0x390>)
 8000b06:	f001 fa80 	bl	800200a <HAL_GPIO_WritePin>
		  break;
 8000b0a:	e0fb      	b.n	8000d04 <display7SEG_vertical+0x388>
	  case 4:
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2180      	movs	r1, #128	; 0x80
 8000b10:	487e      	ldr	r0, [pc, #504]	; (8000d0c <display7SEG_vertical+0x390>)
 8000b12:	f001 fa7a 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b1c:	487b      	ldr	r0, [pc, #492]	; (8000d0c <display7SEG_vertical+0x390>)
 8000b1e:	f001 fa74 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b28:	4878      	ldr	r0, [pc, #480]	; (8000d0c <display7SEG_vertical+0x390>)
 8000b2a:	f001 fa6e 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_SET);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b34:	4875      	ldr	r0, [pc, #468]	; (8000d0c <display7SEG_vertical+0x390>)
 8000b36:	f001 fa68 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_SET);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b40:	4872      	ldr	r0, [pc, #456]	; (8000d0c <display7SEG_vertical+0x390>)
 8000b42:	f001 fa62 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b4c:	486f      	ldr	r0, [pc, #444]	; (8000d0c <display7SEG_vertical+0x390>)
 8000b4e:	f001 fa5c 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b58:	486c      	ldr	r0, [pc, #432]	; (8000d0c <display7SEG_vertical+0x390>)
 8000b5a:	f001 fa56 	bl	800200a <HAL_GPIO_WritePin>
		  break;
 8000b5e:	e0d1      	b.n	8000d04 <display7SEG_vertical+0x388>
	  case 5:
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2180      	movs	r1, #128	; 0x80
 8000b64:	4869      	ldr	r0, [pc, #420]	; (8000d0c <display7SEG_vertical+0x390>)
 8000b66:	f001 fa50 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_SET);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b70:	4866      	ldr	r0, [pc, #408]	; (8000d0c <display7SEG_vertical+0x390>)
 8000b72:	f001 fa4a 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b7c:	4863      	ldr	r0, [pc, #396]	; (8000d0c <display7SEG_vertical+0x390>)
 8000b7e:	f001 fa44 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b88:	4860      	ldr	r0, [pc, #384]	; (8000d0c <display7SEG_vertical+0x390>)
 8000b8a:	f001 fa3e 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_SET);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b94:	485d      	ldr	r0, [pc, #372]	; (8000d0c <display7SEG_vertical+0x390>)
 8000b96:	f001 fa38 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ba0:	485a      	ldr	r0, [pc, #360]	; (8000d0c <display7SEG_vertical+0x390>)
 8000ba2:	f001 fa32 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bac:	4857      	ldr	r0, [pc, #348]	; (8000d0c <display7SEG_vertical+0x390>)
 8000bae:	f001 fa2c 	bl	800200a <HAL_GPIO_WritePin>
		  break;
 8000bb2:	e0a7      	b.n	8000d04 <display7SEG_vertical+0x388>
	  case 6:
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2180      	movs	r1, #128	; 0x80
 8000bb8:	4854      	ldr	r0, [pc, #336]	; (8000d0c <display7SEG_vertical+0x390>)
 8000bba:	f001 fa26 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_SET);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc4:	4851      	ldr	r0, [pc, #324]	; (8000d0c <display7SEG_vertical+0x390>)
 8000bc6:	f001 fa20 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd0:	484e      	ldr	r0, [pc, #312]	; (8000d0c <display7SEG_vertical+0x390>)
 8000bd2:	f001 fa1a 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bdc:	484b      	ldr	r0, [pc, #300]	; (8000d0c <display7SEG_vertical+0x390>)
 8000bde:	f001 fa14 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000be8:	4848      	ldr	r0, [pc, #288]	; (8000d0c <display7SEG_vertical+0x390>)
 8000bea:	f001 fa0e 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bf4:	4845      	ldr	r0, [pc, #276]	; (8000d0c <display7SEG_vertical+0x390>)
 8000bf6:	f001 fa08 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c00:	4842      	ldr	r0, [pc, #264]	; (8000d0c <display7SEG_vertical+0x390>)
 8000c02:	f001 fa02 	bl	800200a <HAL_GPIO_WritePin>
		  break;
 8000c06:	e07d      	b.n	8000d04 <display7SEG_vertical+0x388>
	  case 7:
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2180      	movs	r1, #128	; 0x80
 8000c0c:	483f      	ldr	r0, [pc, #252]	; (8000d0c <display7SEG_vertical+0x390>)
 8000c0e:	f001 f9fc 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c18:	483c      	ldr	r0, [pc, #240]	; (8000d0c <display7SEG_vertical+0x390>)
 8000c1a:	f001 f9f6 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c24:	4839      	ldr	r0, [pc, #228]	; (8000d0c <display7SEG_vertical+0x390>)
 8000c26:	f001 f9f0 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c30:	4836      	ldr	r0, [pc, #216]	; (8000d0c <display7SEG_vertical+0x390>)
 8000c32:	f001 f9ea 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_SET);
 8000c36:	2201      	movs	r2, #1
 8000c38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c3c:	4833      	ldr	r0, [pc, #204]	; (8000d0c <display7SEG_vertical+0x390>)
 8000c3e:	f001 f9e4 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_SET);
 8000c42:	2201      	movs	r2, #1
 8000c44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c48:	4830      	ldr	r0, [pc, #192]	; (8000d0c <display7SEG_vertical+0x390>)
 8000c4a:	f001 f9de 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_SET);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c54:	482d      	ldr	r0, [pc, #180]	; (8000d0c <display7SEG_vertical+0x390>)
 8000c56:	f001 f9d8 	bl	800200a <HAL_GPIO_WritePin>
		  break;
 8000c5a:	e053      	b.n	8000d04 <display7SEG_vertical+0x388>
	  case 8:
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2180      	movs	r1, #128	; 0x80
 8000c60:	482a      	ldr	r0, [pc, #168]	; (8000d0c <display7SEG_vertical+0x390>)
 8000c62:	f001 f9d2 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c6c:	4827      	ldr	r0, [pc, #156]	; (8000d0c <display7SEG_vertical+0x390>)
 8000c6e:	f001 f9cc 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c78:	4824      	ldr	r0, [pc, #144]	; (8000d0c <display7SEG_vertical+0x390>)
 8000c7a:	f001 f9c6 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c84:	4821      	ldr	r0, [pc, #132]	; (8000d0c <display7SEG_vertical+0x390>)
 8000c86:	f001 f9c0 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c90:	481e      	ldr	r0, [pc, #120]	; (8000d0c <display7SEG_vertical+0x390>)
 8000c92:	f001 f9ba 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c9c:	481b      	ldr	r0, [pc, #108]	; (8000d0c <display7SEG_vertical+0x390>)
 8000c9e:	f001 f9b4 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca8:	4818      	ldr	r0, [pc, #96]	; (8000d0c <display7SEG_vertical+0x390>)
 8000caa:	f001 f9ae 	bl	800200a <HAL_GPIO_WritePin>
		  break;
 8000cae:	e029      	b.n	8000d04 <display7SEG_vertical+0x388>
	  case 9:
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_0, GPIO_PIN_RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2180      	movs	r1, #128	; 0x80
 8000cb4:	4815      	ldr	r0, [pc, #84]	; (8000d0c <display7SEG_vertical+0x390>)
 8000cb6:	f001 f9a8 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_1, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cc0:	4812      	ldr	r0, [pc, #72]	; (8000d0c <display7SEG_vertical+0x390>)
 8000cc2:	f001 f9a2 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_2, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ccc:	480f      	ldr	r0, [pc, #60]	; (8000d0c <display7SEG_vertical+0x390>)
 8000cce:	f001 f99c 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_3, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd8:	480c      	ldr	r0, [pc, #48]	; (8000d0c <display7SEG_vertical+0x390>)
 8000cda:	f001 f996 	bl	800200a <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(GPIOB, SEG2_4, GPIO_PIN_SET);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ce4:	4809      	ldr	r0, [pc, #36]	; (8000d0c <display7SEG_vertical+0x390>)
 8000ce6:	f001 f990 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_5, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cf0:	4806      	ldr	r0, [pc, #24]	; (8000d0c <display7SEG_vertical+0x390>)
 8000cf2:	f001 f98a 	bl	800200a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, SEG2_6, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cfc:	4803      	ldr	r0, [pc, #12]	; (8000d0c <display7SEG_vertical+0x390>)
 8000cfe:	f001 f984 	bl	800200a <HAL_GPIO_WritePin>
		  break;
 8000d02:	bf00      	nop

	}
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40010c00 	.word	0x40010c00

08000d10 <update7SEG>:

void update7SEG(){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	static int indexBuffer = 0;
	switch(indexBuffer){
 8000d14:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <update7SEG+0x88>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d002      	beq.n	8000d22 <update7SEG+0x12>
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d01c      	beq.n	8000d5a <update7SEG+0x4a>
		HAL_GPIO_WritePin(GPIOA, EN3, GPIO_PIN_RESET);
		indexBuffer = 0;
		break;

	default:
		break;
 8000d20:	e037      	b.n	8000d92 <update7SEG+0x82>
		HAL_GPIO_WritePin(GPIOA, EN0, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d28:	481c      	ldr	r0, [pc, #112]	; (8000d9c <update7SEG+0x8c>)
 8000d2a:	f001 f96e 	bl	800200a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN1, GPIO_PIN_SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d34:	4819      	ldr	r0, [pc, #100]	; (8000d9c <update7SEG+0x8c>)
 8000d36:	f001 f968 	bl	800200a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN2, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d40:	4816      	ldr	r0, [pc, #88]	; (8000d9c <update7SEG+0x8c>)
 8000d42:	f001 f962 	bl	800200a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN3, GPIO_PIN_SET);
 8000d46:	2201      	movs	r2, #1
 8000d48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d4c:	4813      	ldr	r0, [pc, #76]	; (8000d9c <update7SEG+0x8c>)
 8000d4e:	f001 f95c 	bl	800200a <HAL_GPIO_WritePin>
		indexBuffer = 1;
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <update7SEG+0x88>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	601a      	str	r2, [r3, #0]
		break;
 8000d58:	e01b      	b.n	8000d92 <update7SEG+0x82>
		HAL_GPIO_WritePin(GPIOA, EN0, GPIO_PIN_SET);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d60:	480e      	ldr	r0, [pc, #56]	; (8000d9c <update7SEG+0x8c>)
 8000d62:	f001 f952 	bl	800200a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN1, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d6c:	480b      	ldr	r0, [pc, #44]	; (8000d9c <update7SEG+0x8c>)
 8000d6e:	f001 f94c 	bl	800200a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN2, GPIO_PIN_SET);
 8000d72:	2201      	movs	r2, #1
 8000d74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d78:	4808      	ldr	r0, [pc, #32]	; (8000d9c <update7SEG+0x8c>)
 8000d7a:	f001 f946 	bl	800200a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN3, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d84:	4805      	ldr	r0, [pc, #20]	; (8000d9c <update7SEG+0x8c>)
 8000d86:	f001 f940 	bl	800200a <HAL_GPIO_WritePin>
		indexBuffer = 0;
 8000d8a:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <update7SEG+0x88>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
		break;
 8000d90:	bf00      	nop
	}
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200000c0 	.word	0x200000c0
 8000d9c:	40010800 	.word	0x40010800

08000da0 <updateBuffer>:

void updateBuffer()
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
		led_buffer[0] = TIME_RED / 10;
 8000da4:	4b27      	ldr	r3, [pc, #156]	; (8000e44 <updateBuffer+0xa4>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a27      	ldr	r2, [pc, #156]	; (8000e48 <updateBuffer+0xa8>)
 8000daa:	fb82 1203 	smull	r1, r2, r2, r3
 8000dae:	1092      	asrs	r2, r2, #2
 8000db0:	17db      	asrs	r3, r3, #31
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	4a25      	ldr	r2, [pc, #148]	; (8000e4c <updateBuffer+0xac>)
 8000db6:	6013      	str	r3, [r2, #0]
		led_buffer[1] = TIME_RED % 10;
 8000db8:	4b22      	ldr	r3, [pc, #136]	; (8000e44 <updateBuffer+0xa4>)
 8000dba:	6819      	ldr	r1, [r3, #0]
 8000dbc:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <updateBuffer+0xa8>)
 8000dbe:	fb83 2301 	smull	r2, r3, r3, r1
 8000dc2:	109a      	asrs	r2, r3, #2
 8000dc4:	17cb      	asrs	r3, r1, #31
 8000dc6:	1ad2      	subs	r2, r2, r3
 8000dc8:	4613      	mov	r3, r2
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	4413      	add	r3, r2
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	1aca      	subs	r2, r1, r3
 8000dd2:	4b1e      	ldr	r3, [pc, #120]	; (8000e4c <updateBuffer+0xac>)
 8000dd4:	605a      	str	r2, [r3, #4]
		led_buffer[2] = TIME_GREEN / 10;
 8000dd6:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <updateBuffer+0xb0>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a1b      	ldr	r2, [pc, #108]	; (8000e48 <updateBuffer+0xa8>)
 8000ddc:	fb82 1203 	smull	r1, r2, r2, r3
 8000de0:	1092      	asrs	r2, r2, #2
 8000de2:	17db      	asrs	r3, r3, #31
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	4a19      	ldr	r2, [pc, #100]	; (8000e4c <updateBuffer+0xac>)
 8000de8:	6093      	str	r3, [r2, #8]
		led_buffer[3] = TIME_GREEN % 10;
 8000dea:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <updateBuffer+0xb0>)
 8000dec:	6819      	ldr	r1, [r3, #0]
 8000dee:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <updateBuffer+0xa8>)
 8000df0:	fb83 2301 	smull	r2, r3, r3, r1
 8000df4:	109a      	asrs	r2, r3, #2
 8000df6:	17cb      	asrs	r3, r1, #31
 8000df8:	1ad2      	subs	r2, r2, r3
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	1aca      	subs	r2, r1, r3
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <updateBuffer+0xac>)
 8000e06:	60da      	str	r2, [r3, #12]
		led_buffer[4] = TIME_YELLOW / 10;
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <updateBuffer+0xb4>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <updateBuffer+0xa8>)
 8000e0e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e12:	1092      	asrs	r2, r2, #2
 8000e14:	17db      	asrs	r3, r3, #31
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	4a0c      	ldr	r2, [pc, #48]	; (8000e4c <updateBuffer+0xac>)
 8000e1a:	6113      	str	r3, [r2, #16]
		led_buffer[5] = TIME_YELLOW % 10;
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <updateBuffer+0xb4>)
 8000e1e:	6819      	ldr	r1, [r3, #0]
 8000e20:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <updateBuffer+0xa8>)
 8000e22:	fb83 2301 	smull	r2, r3, r3, r1
 8000e26:	109a      	asrs	r2, r3, #2
 8000e28:	17cb      	asrs	r3, r1, #31
 8000e2a:	1ad2      	subs	r2, r2, r3
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4413      	add	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	1aca      	subs	r2, r1, r3
 8000e36:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <updateBuffer+0xac>)
 8000e38:	615a      	str	r2, [r3, #20]
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	2000004c 	.word	0x2000004c
 8000e48:	66666667 	.word	0x66666667
 8000e4c:	200000a8 	.word	0x200000a8
 8000e50:	20000054 	.word	0x20000054
 8000e54:	20000050 	.word	0x20000050

08000e58 <countdown7SEG>:


void countdown7SEG() {
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
    int i;
    // Xử lý đếm ngược và đặt lại thời gian
    for (i = 0; i < 6; i += 2) { // Xử lý từng cặp led_buffer (hàng chục và đơn vị)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	e081      	b.n	8000f68 <countdown7SEG+0x110>
        if (led_buffer[i + 1] < 0 && led_buffer[i] > 0) {
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3301      	adds	r3, #1
 8000e68:	4a44      	ldr	r2, [pc, #272]	; (8000f7c <countdown7SEG+0x124>)
 8000e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	da14      	bge.n	8000e9c <countdown7SEG+0x44>
 8000e72:	4a42      	ldr	r2, [pc, #264]	; (8000f7c <countdown7SEG+0x124>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	dd0e      	ble.n	8000e9c <countdown7SEG+0x44>
            led_buffer[i + 1] = 9;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3301      	adds	r3, #1
 8000e82:	4a3e      	ldr	r2, [pc, #248]	; (8000f7c <countdown7SEG+0x124>)
 8000e84:	2109      	movs	r1, #9
 8000e86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            led_buffer[i]--;
 8000e8a:	4a3c      	ldr	r2, [pc, #240]	; (8000f7c <countdown7SEG+0x124>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e92:	1e5a      	subs	r2, r3, #1
 8000e94:	4939      	ldr	r1, [pc, #228]	; (8000f7c <countdown7SEG+0x124>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
        if (led_buffer[i] == 0 && led_buffer[i + 1] == 0) {
 8000e9c:	4a37      	ldr	r2, [pc, #220]	; (8000f7c <countdown7SEG+0x124>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d15c      	bne.n	8000f62 <countdown7SEG+0x10a>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	4a33      	ldr	r2, [pc, #204]	; (8000f7c <countdown7SEG+0x124>)
 8000eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d155      	bne.n	8000f62 <countdown7SEG+0x10a>
            if (i == 0) { // Đèn đỏ
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d119      	bne.n	8000ef0 <countdown7SEG+0x98>
                led_buffer[0] = TIME_RED / 10;
 8000ebc:	4b30      	ldr	r3, [pc, #192]	; (8000f80 <countdown7SEG+0x128>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a30      	ldr	r2, [pc, #192]	; (8000f84 <countdown7SEG+0x12c>)
 8000ec2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ec6:	1092      	asrs	r2, r2, #2
 8000ec8:	17db      	asrs	r3, r3, #31
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	4a2b      	ldr	r2, [pc, #172]	; (8000f7c <countdown7SEG+0x124>)
 8000ece:	6013      	str	r3, [r2, #0]
                led_buffer[1] = TIME_RED % 10;
 8000ed0:	4b2b      	ldr	r3, [pc, #172]	; (8000f80 <countdown7SEG+0x128>)
 8000ed2:	6819      	ldr	r1, [r3, #0]
 8000ed4:	4b2b      	ldr	r3, [pc, #172]	; (8000f84 <countdown7SEG+0x12c>)
 8000ed6:	fb83 2301 	smull	r2, r3, r3, r1
 8000eda:	109a      	asrs	r2, r3, #2
 8000edc:	17cb      	asrs	r3, r1, #31
 8000ede:	1ad2      	subs	r2, r2, r3
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	4413      	add	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	1aca      	subs	r2, r1, r3
 8000eea:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <countdown7SEG+0x124>)
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	e038      	b.n	8000f62 <countdown7SEG+0x10a>
            } else if (i == 2) { // Đèn xanh
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d119      	bne.n	8000f2a <countdown7SEG+0xd2>
                led_buffer[2] = TIME_GREEN / 10;
 8000ef6:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <countdown7SEG+0x130>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a22      	ldr	r2, [pc, #136]	; (8000f84 <countdown7SEG+0x12c>)
 8000efc:	fb82 1203 	smull	r1, r2, r2, r3
 8000f00:	1092      	asrs	r2, r2, #2
 8000f02:	17db      	asrs	r3, r3, #31
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	4a1d      	ldr	r2, [pc, #116]	; (8000f7c <countdown7SEG+0x124>)
 8000f08:	6093      	str	r3, [r2, #8]
                led_buffer[3] = TIME_GREEN % 10;
 8000f0a:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <countdown7SEG+0x130>)
 8000f0c:	6819      	ldr	r1, [r3, #0]
 8000f0e:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <countdown7SEG+0x12c>)
 8000f10:	fb83 2301 	smull	r2, r3, r3, r1
 8000f14:	109a      	asrs	r2, r3, #2
 8000f16:	17cb      	asrs	r3, r1, #31
 8000f18:	1ad2      	subs	r2, r2, r3
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	1aca      	subs	r2, r1, r3
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <countdown7SEG+0x124>)
 8000f26:	60da      	str	r2, [r3, #12]
 8000f28:	e01b      	b.n	8000f62 <countdown7SEG+0x10a>
            } else if (i == 4) { // Đèn vàng
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b04      	cmp	r3, #4
 8000f2e:	d118      	bne.n	8000f62 <countdown7SEG+0x10a>
                led_buffer[4] = TIME_YELLOW / 10;
 8000f30:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <countdown7SEG+0x134>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a13      	ldr	r2, [pc, #76]	; (8000f84 <countdown7SEG+0x12c>)
 8000f36:	fb82 1203 	smull	r1, r2, r2, r3
 8000f3a:	1092      	asrs	r2, r2, #2
 8000f3c:	17db      	asrs	r3, r3, #31
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	4a0e      	ldr	r2, [pc, #56]	; (8000f7c <countdown7SEG+0x124>)
 8000f42:	6113      	str	r3, [r2, #16]
                led_buffer[5] = TIME_YELLOW % 10;
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <countdown7SEG+0x134>)
 8000f46:	6819      	ldr	r1, [r3, #0]
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <countdown7SEG+0x12c>)
 8000f4a:	fb83 2301 	smull	r2, r3, r3, r1
 8000f4e:	109a      	asrs	r2, r3, #2
 8000f50:	17cb      	asrs	r3, r1, #31
 8000f52:	1ad2      	subs	r2, r2, r3
 8000f54:	4613      	mov	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4413      	add	r3, r2
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	1aca      	subs	r2, r1, r3
 8000f5e:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <countdown7SEG+0x124>)
 8000f60:	615a      	str	r2, [r3, #20]
    for (i = 0; i < 6; i += 2) { // Xử lý từng cặp led_buffer (hàng chục và đơn vị)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3302      	adds	r3, #2
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b05      	cmp	r3, #5
 8000f6c:	f77f af7a 	ble.w	8000e64 <countdown7SEG+0xc>
            }
        }
    }
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	200000a8 	.word	0x200000a8
 8000f80:	2000004c 	.word	0x2000004c
 8000f84:	66666667 	.word	0x66666667
 8000f88:	20000054 	.word	0x20000054
 8000f8c:	20000050 	.word	0x20000050

08000f90 <led7SEG_YR>:

void led7SEG_YR() {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
    switch (status_system) {
 8000f94:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <led7SEG_YR+0x64>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d002      	beq.n	8000fa2 <led7SEG_YR+0x12>
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d00e      	beq.n	8000fbe <led7SEG_YR+0x2e>
            led_buffer[1]--; // Giảm đèn đỏ
            led_buffer[5]--; // Giảm đèn vàng
            status_system = 0;
            break;
    }
}
 8000fa0:	e025      	b.n	8000fee <led7SEG_YR+0x5e>
        	display7SEG_horizontal(led_buffer[4]); // Hàng chục đèn vàng
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <led7SEG_YR+0x68>)
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fb5a 	bl	8000660 <display7SEG_horizontal>
            display7SEG_vertical(led_buffer[0]); // Hàng chục đèn đỏ
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <led7SEG_YR+0x68>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fce3 	bl	800097c <display7SEG_vertical>
            status_system = 1;
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <led7SEG_YR+0x64>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	601a      	str	r2, [r3, #0]
            break;
 8000fbc:	e017      	b.n	8000fee <led7SEG_YR+0x5e>
            display7SEG_horizontal(led_buffer[5]); // Hàng đơn vị đèn vàng
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <led7SEG_YR+0x68>)
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fb4c 	bl	8000660 <display7SEG_horizontal>
            display7SEG_vertical(led_buffer[1]); // Hàng đơn vị đèn đỏ
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <led7SEG_YR+0x68>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fcd5 	bl	800097c <display7SEG_vertical>
            led_buffer[1]--; // Giảm đèn đỏ
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <led7SEG_YR+0x68>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <led7SEG_YR+0x68>)
 8000fda:	6053      	str	r3, [r2, #4]
            led_buffer[5]--; // Giảm đèn vàng
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <led7SEG_YR+0x68>)
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <led7SEG_YR+0x68>)
 8000fe4:	6153      	str	r3, [r2, #20]
            status_system = 0;
 8000fe6:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <led7SEG_YR+0x64>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
            break;
 8000fec:	bf00      	nop
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000094 	.word	0x20000094
 8000ff8:	200000a8 	.word	0x200000a8

08000ffc <led7SEG_GR>:


void led7SEG_GR() {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
    switch (status_system) {
 8001000:	4b17      	ldr	r3, [pc, #92]	; (8001060 <led7SEG_GR+0x64>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d002      	beq.n	800100e <led7SEG_GR+0x12>
 8001008:	2b01      	cmp	r3, #1
 800100a:	d00e      	beq.n	800102a <led7SEG_GR+0x2e>
            led_buffer[1]--; // Giảm đèn đỏ
            led_buffer[3]--; // Giảm đèn xanh
            status_system = 0;
            break;
    }
}
 800100c:	e025      	b.n	800105a <led7SEG_GR+0x5e>
        	display7SEG_horizontal(led_buffer[2]); // Hàng chục đèn xanh
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <led7SEG_GR+0x68>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fb24 	bl	8000660 <display7SEG_horizontal>
            display7SEG_vertical(led_buffer[0]); // Hàng chục đèn đỏ
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <led7SEG_GR+0x68>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fcad 	bl	800097c <display7SEG_vertical>
            status_system = 1;
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <led7SEG_GR+0x64>)
 8001024:	2201      	movs	r2, #1
 8001026:	601a      	str	r2, [r3, #0]
            break;
 8001028:	e017      	b.n	800105a <led7SEG_GR+0x5e>
            display7SEG_horizontal(led_buffer[3]); // Hàng đơn vị đèn xanh
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <led7SEG_GR+0x68>)
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fb16 	bl	8000660 <display7SEG_horizontal>
            display7SEG_vertical(led_buffer[1]); // Hàng đơn vị đèn đỏ
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <led7SEG_GR+0x68>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fc9f 	bl	800097c <display7SEG_vertical>
            led_buffer[1]--; // Giảm đèn đỏ
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <led7SEG_GR+0x68>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	4a07      	ldr	r2, [pc, #28]	; (8001064 <led7SEG_GR+0x68>)
 8001046:	6053      	str	r3, [r2, #4]
            led_buffer[3]--; // Giảm đèn xanh
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <led7SEG_GR+0x68>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	3b01      	subs	r3, #1
 800104e:	4a05      	ldr	r2, [pc, #20]	; (8001064 <led7SEG_GR+0x68>)
 8001050:	60d3      	str	r3, [r2, #12]
            status_system = 0;
 8001052:	4b03      	ldr	r3, [pc, #12]	; (8001060 <led7SEG_GR+0x64>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
            break;
 8001058:	bf00      	nop
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000094 	.word	0x20000094
 8001064:	200000a8 	.word	0x200000a8

08001068 <led7SEG_RY>:

void led7SEG_RY() {
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
    switch (status_system) {
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <led7SEG_RY+0x64>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d002      	beq.n	800107a <led7SEG_RY+0x12>
 8001074:	2b01      	cmp	r3, #1
 8001076:	d00e      	beq.n	8001096 <led7SEG_RY+0x2e>
            led_buffer[1]--; // Giảm đèn đỏ
            led_buffer[5]--; // Giảm đèn vàng
            status_system = 0;
            break;
    }
}
 8001078:	e025      	b.n	80010c6 <led7SEG_RY+0x5e>
        	display7SEG_horizontal(led_buffer[0]); // Hàng chục đèn đỏ
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <led7SEG_RY+0x68>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff faee 	bl	8000660 <display7SEG_horizontal>
            display7SEG_vertical(led_buffer[4]); // Hàng chục đèn vàng
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <led7SEG_RY+0x68>)
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fc77 	bl	800097c <display7SEG_vertical>
            status_system = 1;
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <led7SEG_RY+0x64>)
 8001090:	2201      	movs	r2, #1
 8001092:	601a      	str	r2, [r3, #0]
            break;
 8001094:	e017      	b.n	80010c6 <led7SEG_RY+0x5e>
            display7SEG_horizontal(led_buffer[1]); // Hàng đơn vị đèn đỏ
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <led7SEG_RY+0x68>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fae0 	bl	8000660 <display7SEG_horizontal>
            display7SEG_vertical(led_buffer[5]); // Hàng đơn vị đèn vàng
 80010a0:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <led7SEG_RY+0x68>)
 80010a2:	695b      	ldr	r3, [r3, #20]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fc69 	bl	800097c <display7SEG_vertical>
            led_buffer[1]--; // Giảm đèn đỏ
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <led7SEG_RY+0x68>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <led7SEG_RY+0x68>)
 80010b2:	6053      	str	r3, [r2, #4]
            led_buffer[5]--; // Giảm đèn vàng
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <led7SEG_RY+0x68>)
 80010b6:	695b      	ldr	r3, [r3, #20]
 80010b8:	3b01      	subs	r3, #1
 80010ba:	4a05      	ldr	r2, [pc, #20]	; (80010d0 <led7SEG_RY+0x68>)
 80010bc:	6153      	str	r3, [r2, #20]
            status_system = 0;
 80010be:	4b03      	ldr	r3, [pc, #12]	; (80010cc <led7SEG_RY+0x64>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
            break;
 80010c4:	bf00      	nop
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000094 	.word	0x20000094
 80010d0:	200000a8 	.word	0x200000a8

080010d4 <led7SEG_RG>:

void led7SEG_RG() {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
    switch (status_system) {
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <led7SEG_RG+0x64>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d002      	beq.n	80010e6 <led7SEG_RG+0x12>
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d00e      	beq.n	8001102 <led7SEG_RG+0x2e>
            led_buffer[1]--; // Giảm đèn đỏ
            led_buffer[3]--; // Giảm đèn xanh
            status_system = 0;
            break;
    }
}
 80010e4:	e025      	b.n	8001132 <led7SEG_RG+0x5e>
        	display7SEG_horizontal(led_buffer[0]); // Hàng chục đèn xanh
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <led7SEG_RG+0x68>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fab8 	bl	8000660 <display7SEG_horizontal>
            display7SEG_vertical(led_buffer[2]); // Hàng chục đèn đỏ
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <led7SEG_RG+0x68>)
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fc41 	bl	800097c <display7SEG_vertical>
            status_system = 1;
 80010fa:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <led7SEG_RG+0x64>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	601a      	str	r2, [r3, #0]
            break;
 8001100:	e017      	b.n	8001132 <led7SEG_RG+0x5e>
            display7SEG_horizontal(led_buffer[1]); // Hàng đơn vị đèn đỏ
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <led7SEG_RG+0x68>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff faaa 	bl	8000660 <display7SEG_horizontal>
            display7SEG_vertical(led_buffer[3]); // Hàng đơn vị đèn xanh
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <led7SEG_RG+0x68>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fc33 	bl	800097c <display7SEG_vertical>
            led_buffer[1]--; // Giảm đèn đỏ
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <led7SEG_RG+0x68>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	4a07      	ldr	r2, [pc, #28]	; (800113c <led7SEG_RG+0x68>)
 800111e:	6053      	str	r3, [r2, #4]
            led_buffer[3]--; // Giảm đèn xanh
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <led7SEG_RG+0x68>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	3b01      	subs	r3, #1
 8001126:	4a05      	ldr	r2, [pc, #20]	; (800113c <led7SEG_RG+0x68>)
 8001128:	60d3      	str	r3, [r2, #12]
            status_system = 0;
 800112a:	4b03      	ldr	r3, [pc, #12]	; (8001138 <led7SEG_RG+0x64>)
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
            break;
 8001130:	bf00      	nop
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000094 	.word	0x20000094
 800113c:	200000a8 	.word	0x200000a8

08001140 <display7SEG>:

void display7SEG(){
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	switch(status){
 8001144:	4b15      	ldr	r3, [pc, #84]	; (800119c <display7SEG+0x5c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b09      	cmp	r3, #9
 800114a:	d823      	bhi.n	8001194 <display7SEG+0x54>
 800114c:	a201      	add	r2, pc, #4	; (adr r2, 8001154 <display7SEG+0x14>)
 800114e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001152:	bf00      	nop
 8001154:	08001195 	.word	0x08001195
 8001158:	08001195 	.word	0x08001195
 800115c:	08001195 	.word	0x08001195
 8001160:	08001195 	.word	0x08001195
 8001164:	08001195 	.word	0x08001195
 8001168:	08001195 	.word	0x08001195
 800116c:	0800117d 	.word	0x0800117d
 8001170:	08001183 	.word	0x08001183
 8001174:	08001189 	.word	0x08001189
 8001178:	0800118f 	.word	0x0800118f
	case MOD_INIT:
		break;
	case RED_GREEN:
		led7SEG_RG();
 800117c:	f7ff ffaa 	bl	80010d4 <led7SEG_RG>
		break;
 8001180:	e009      	b.n	8001196 <display7SEG+0x56>
	case RED_YELLOW:
		led7SEG_RY();
 8001182:	f7ff ff71 	bl	8001068 <led7SEG_RY>
		break;
 8001186:	e006      	b.n	8001196 <display7SEG+0x56>
	case GREEN_RED:
		led7SEG_GR();
 8001188:	f7ff ff38 	bl	8000ffc <led7SEG_GR>
		break;
 800118c:	e003      	b.n	8001196 <display7SEG+0x56>
	case YELLOW_RED:
		led7SEG_YR();
 800118e:	f7ff feff 	bl	8000f90 <led7SEG_YR>
		break;
 8001192:	e000      	b.n	8001196 <display7SEG+0x56>
	default:
		break;
 8001194:	bf00      	nop
	}
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000090 	.word	0x20000090

080011a0 <toggleLedRed>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void toggleLedRed(){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, LED_RED);
 80011a4:	2120      	movs	r1, #32
 80011a6:	4802      	ldr	r0, [pc, #8]	; (80011b0 <toggleLedRed+0x10>)
 80011a8:	f000 ff47 	bl	800203a <HAL_GPIO_TogglePin>
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40010800 	.word	0x40010800

080011b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b8:	f000 fc26 	bl	8001a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011bc:	f000 f838 	bl	8001230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c0:	f000 f8be 	bl	8001340 <MX_GPIO_Init>
  MX_TIM2_Init();
 80011c4:	f000 f870 	bl	80012a8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80011c8:	4812      	ldr	r0, [pc, #72]	; (8001214 <main+0x60>)
 80011ca:	f001 fb7b 	bl	80028c4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 80011ce:	f000 f920 	bl	8001412 <SCH_Init>

  SCH_Add_Task(toggleLedRed, 200, 100);
 80011d2:	2264      	movs	r2, #100	; 0x64
 80011d4:	21c8      	movs	r1, #200	; 0xc8
 80011d6:	4810      	ldr	r0, [pc, #64]	; (8001218 <main+0x64>)
 80011d8:	f000 f99e 	bl	8001518 <SCH_Add_Task>

  SCH_Add_Task(fsm_automatic, 0, 100);
 80011dc:	2264      	movs	r2, #100	; 0x64
 80011de:	2100      	movs	r1, #0
 80011e0:	480e      	ldr	r0, [pc, #56]	; (800121c <main+0x68>)
 80011e2:	f000 f999 	bl	8001518 <SCH_Add_Task>
  SCH_Add_Task(display7SEG, 0, 50);
 80011e6:	2232      	movs	r2, #50	; 0x32
 80011e8:	2100      	movs	r1, #0
 80011ea:	480d      	ldr	r0, [pc, #52]	; (8001220 <main+0x6c>)
 80011ec:	f000 f994 	bl	8001518 <SCH_Add_Task>

  SCH_Add_Task(update7SEG, 0, 50);
 80011f0:	2232      	movs	r2, #50	; 0x32
 80011f2:	2100      	movs	r1, #0
 80011f4:	480b      	ldr	r0, [pc, #44]	; (8001224 <main+0x70>)
 80011f6:	f000 f98f 	bl	8001518 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual, 0, 50);
 80011fa:	2232      	movs	r2, #50	; 0x32
 80011fc:	2100      	movs	r1, #0
 80011fe:	480a      	ldr	r0, [pc, #40]	; (8001228 <main+0x74>)
 8001200:	f000 f98a 	bl	8001518 <SCH_Add_Task>

  SCH_Add_Task(countdown7SEG, 0, 50);
 8001204:	2232      	movs	r2, #50	; 0x32
 8001206:	2100      	movs	r1, #0
 8001208:	4808      	ldr	r0, [pc, #32]	; (800122c <main+0x78>)
 800120a:	f000 f985 	bl	8001518 <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch_Tasks();
 800120e:	f000 f9d5 	bl	80015bc <SCH_Dispatch_Tasks>
 8001212:	e7fc      	b.n	800120e <main+0x5a>
 8001214:	200000c4 	.word	0x200000c4
 8001218:	080011a1 	.word	0x080011a1
 800121c:	080002c1 	.word	0x080002c1
 8001220:	08001141 	.word	0x08001141
 8001224:	08000d11 	.word	0x08000d11
 8001228:	08000481 	.word	0x08000481
 800122c:	08000e59 	.word	0x08000e59

08001230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b090      	sub	sp, #64	; 0x40
 8001234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001236:	f107 0318 	add.w	r3, r7, #24
 800123a:	2228      	movs	r2, #40	; 0x28
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f001 fef0 	bl	8003024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001252:	2302      	movs	r3, #2
 8001254:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001256:	2301      	movs	r3, #1
 8001258:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800125a:	2310      	movs	r3, #16
 800125c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800125e:	2300      	movs	r3, #0
 8001260:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001262:	f107 0318 	add.w	r3, r7, #24
 8001266:	4618      	mov	r0, r3
 8001268:	f000 ff00 	bl	800206c <HAL_RCC_OscConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001272:	f000 f8c9 	bl	8001408 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001276:	230f      	movs	r3, #15
 8001278:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f001 f96c 	bl	800256c <HAL_RCC_ClockConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800129a:	f000 f8b5 	bl	8001408 <Error_Handler>
  }
}
 800129e:	bf00      	nop
 80012a0:	3740      	adds	r7, #64	; 0x40
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012bc:	463b      	mov	r3, r7
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012c4:	4b1d      	ldr	r3, [pc, #116]	; (800133c <MX_TIM2_Init+0x94>)
 80012c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <MX_TIM2_Init+0x94>)
 80012ce:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80012d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d4:	4b19      	ldr	r3, [pc, #100]	; (800133c <MX_TIM2_Init+0x94>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80012da:	4b18      	ldr	r3, [pc, #96]	; (800133c <MX_TIM2_Init+0x94>)
 80012dc:	2209      	movs	r2, #9
 80012de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e0:	4b16      	ldr	r3, [pc, #88]	; (800133c <MX_TIM2_Init+0x94>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <MX_TIM2_Init+0x94>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012ec:	4813      	ldr	r0, [pc, #76]	; (800133c <MX_TIM2_Init+0x94>)
 80012ee:	f001 fa99 	bl	8002824 <HAL_TIM_Base_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012f8:	f000 f886 	bl	8001408 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001300:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001302:	f107 0308 	add.w	r3, r7, #8
 8001306:	4619      	mov	r1, r3
 8001308:	480c      	ldr	r0, [pc, #48]	; (800133c <MX_TIM2_Init+0x94>)
 800130a:	f001 fc17 	bl	8002b3c <HAL_TIM_ConfigClockSource>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001314:	f000 f878 	bl	8001408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001318:	2300      	movs	r3, #0
 800131a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001320:	463b      	mov	r3, r7
 8001322:	4619      	mov	r1, r3
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_TIM2_Init+0x94>)
 8001326:	f001 fdef 	bl	8002f08 <HAL_TIMEx_MasterConfigSynchronization>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001330:	f000 f86a 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200000c4 	.word	0x200000c4

08001340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001354:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <MX_GPIO_Init+0xa4>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	4a22      	ldr	r2, [pc, #136]	; (80013e4 <MX_GPIO_Init+0xa4>)
 800135a:	f043 0304 	orr.w	r3, r3, #4
 800135e:	6193      	str	r3, [r2, #24]
 8001360:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <MX_GPIO_Init+0xa4>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	687b      	ldr	r3, [r7, #4]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800136c:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <MX_GPIO_Init+0xa4>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	4a1c      	ldr	r2, [pc, #112]	; (80013e4 <MX_GPIO_Init+0xa4>)
 8001372:	f043 0308 	orr.w	r3, r3, #8
 8001376:	6193      	str	r3, [r2, #24]
 8001378:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <MX_GPIO_Init+0xa4>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	f003 0308 	and.w	r3, r3, #8
 8001380:	603b      	str	r3, [r7, #0]
 8001382:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = LED_RED|EN0|EN1|EN2|EN3|
 8001384:	f640 73fe 	movw	r3, #4094	; 0xffe
 8001388:	60bb      	str	r3, [r7, #8]
			REDA|REDB|YELLOWA|YELLOWB|GREENA|GREENB;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	2301      	movs	r3, #1
 800138c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2302      	movs	r3, #2
 8001394:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	f107 0308 	add.w	r3, r7, #8
 800139a:	4619      	mov	r1, r3
 800139c:	4812      	ldr	r0, [pc, #72]	; (80013e8 <MX_GPIO_Init+0xa8>)
 800139e:	f000 fca3 	bl	8001ce8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = BUT1|BUT2|BUT3;
 80013a2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80013a6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	f107 0308 	add.w	r3, r7, #8
 80013b4:	4619      	mov	r1, r3
 80013b6:	480c      	ldr	r0, [pc, #48]	; (80013e8 <MX_GPIO_Init+0xa8>)
 80013b8:	f000 fc96 	bl	8001ce8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = SEG1_0|SEG1_1|SEG1_2|SEG1_3|SEG1_4|SEG1_5|SEG1_6|
 80013bc:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80013c0:	60bb      	str	r3, [r7, #8]
			SEG2_0|SEG2_1|SEG2_2|SEG2_3|SEG2_4|SEG2_5|SEG2_6;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c2:	2301      	movs	r3, #1
 80013c4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2302      	movs	r3, #2
 80013cc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ce:	f107 0308 	add.w	r3, r7, #8
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_GPIO_Init+0xac>)
 80013d6:	f000 fc87 	bl	8001ce8 <HAL_GPIO_Init>
}
 80013da:	bf00      	nop
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40010800 	.word	0x40010800
 80013ec:	40010c00 	.word	0x40010c00

080013f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80013f8:	f000 f820 	bl	800143c <SCH_Update>
	getKeyInput();
 80013fc:	f7fe fed0 	bl	80001a0 <getKeyInput>
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800140c:	b672      	cpsid	i
}
 800140e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001410:	e7fe      	b.n	8001410 <Error_Handler+0x8>

08001412 <SCH_Init>:
#include "scheduler.h"

sTask SCH_tasks_G[SCH_MAX_TASKS];
uint8_t current_index_task = 0;

void SCH_Init(void){
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
	 uint8_t i ;
	 for (i = 0; i <SCH_MAX_TASKS; i++) {
 8001418:	2300      	movs	r3, #0
 800141a:	71fb      	strb	r3, [r7, #7]
 800141c:	e006      	b.n	800142c <SCH_Init+0x1a>
	 SCH_Delete_Task(i);
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	4618      	mov	r0, r3
 8001422:	f000 f915 	bl	8001650 <SCH_Delete_Task>
	 for (i = 0; i <SCH_MAX_TASKS; i++) {
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	3301      	adds	r3, #1
 800142a:	71fb      	strb	r3, [r7, #7]
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	2b27      	cmp	r3, #39	; 0x27
 8001430:	d9f5      	bls.n	800141e <SCH_Init+0xc>
	 }

}
 8001432:	bf00      	nop
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <SCH_Update>:
void SCH_Update(void){
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0

	 uint8_t Index;

	 for (Index = 0; Index <SCH_MAX_TASKS; Index++) {
 8001442:	2300      	movs	r3, #0
 8001444:	71fb      	strb	r3, [r7, #7]
 8001446:	e05c      	b.n	8001502 <SCH_Update+0xc6>
		 if (SCH_tasks_G[Index].pTask){
 8001448:	79fa      	ldrb	r2, [r7, #7]
 800144a:	4932      	ldr	r1, [pc, #200]	; (8001514 <SCH_Update+0xd8>)
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d04f      	beq.n	80014fc <SCH_Update+0xc0>
			 if (SCH_tasks_G[Index].Delay == 0) {
 800145c:	79fa      	ldrb	r2, [r7, #7]
 800145e:	492d      	ldr	r1, [pc, #180]	; (8001514 <SCH_Update+0xd8>)
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	440b      	add	r3, r1
 800146a:	3304      	adds	r3, #4
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d132      	bne.n	80014d8 <SCH_Update+0x9c>
				 SCH_tasks_G[Index].RunMe+= 1;
 8001472:	79fa      	ldrb	r2, [r7, #7]
 8001474:	4927      	ldr	r1, [pc, #156]	; (8001514 <SCH_Update+0xd8>)
 8001476:	4613      	mov	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	440b      	add	r3, r1
 8001480:	330c      	adds	r3, #12
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	79fa      	ldrb	r2, [r7, #7]
 8001486:	3301      	adds	r3, #1
 8001488:	b2d8      	uxtb	r0, r3
 800148a:	4922      	ldr	r1, [pc, #136]	; (8001514 <SCH_Update+0xd8>)
 800148c:	4613      	mov	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	330c      	adds	r3, #12
 8001498:	4602      	mov	r2, r0
 800149a:	701a      	strb	r2, [r3, #0]
				 if (SCH_tasks_G[Index].Period) {
 800149c:	79fa      	ldrb	r2, [r7, #7]
 800149e:	491d      	ldr	r1, [pc, #116]	; (8001514 <SCH_Update+0xd8>)
 80014a0:	4613      	mov	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	3308      	adds	r3, #8
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d024      	beq.n	80014fc <SCH_Update+0xc0>
				 SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 80014b2:	79f9      	ldrb	r1, [r7, #7]
 80014b4:	79fa      	ldrb	r2, [r7, #7]
 80014b6:	4817      	ldr	r0, [pc, #92]	; (8001514 <SCH_Update+0xd8>)
 80014b8:	460b      	mov	r3, r1
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4403      	add	r3, r0
 80014c2:	3308      	adds	r3, #8
 80014c4:	6819      	ldr	r1, [r3, #0]
 80014c6:	4813      	ldr	r0, [pc, #76]	; (8001514 <SCH_Update+0xd8>)
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4403      	add	r3, r0
 80014d2:	3304      	adds	r3, #4
 80014d4:	6019      	str	r1, [r3, #0]
 80014d6:	e011      	b.n	80014fc <SCH_Update+0xc0>
				 }
			 } else {

			 SCH_tasks_G[Index].Delay --;
 80014d8:	79fa      	ldrb	r2, [r7, #7]
 80014da:	490e      	ldr	r1, [pc, #56]	; (8001514 <SCH_Update+0xd8>)
 80014dc:	4613      	mov	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	440b      	add	r3, r1
 80014e6:	3304      	adds	r3, #4
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	1e59      	subs	r1, r3, #1
 80014ec:	4809      	ldr	r0, [pc, #36]	; (8001514 <SCH_Update+0xd8>)
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4403      	add	r3, r0
 80014f8:	3304      	adds	r3, #4
 80014fa:	6019      	str	r1, [r3, #0]
	 for (Index = 0; Index <SCH_MAX_TASKS; Index++) {
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	3301      	adds	r3, #1
 8001500:	71fb      	strb	r3, [r7, #7]
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	2b27      	cmp	r3, #39	; 0x27
 8001506:	d99f      	bls.n	8001448 <SCH_Update+0xc>
			 }
		 }
	 }
}
 8001508:	bf00      	nop
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	2000010c 	.word	0x2000010c

08001518 <SCH_Add_Task>:

void SCH_Add_Task( void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 8001518:	b480      	push	{r7}
 800151a:	b087      	sub	sp, #28
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
	 uint8_t Index = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	75fb      	strb	r3, [r7, #23]
	 while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 8001528:	e002      	b.n	8001530 <SCH_Add_Task+0x18>
	 {
		 Index++;
 800152a:	7dfb      	ldrb	r3, [r7, #23]
 800152c:	3301      	adds	r3, #1
 800152e:	75fb      	strb	r3, [r7, #23]
	 while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 8001530:	7dfa      	ldrb	r2, [r7, #23]
 8001532:	4921      	ldr	r1, [pc, #132]	; (80015b8 <SCH_Add_Task+0xa0>)
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d002      	beq.n	800154a <SCH_Add_Task+0x32>
 8001544:	7dfb      	ldrb	r3, [r7, #23]
 8001546:	2b27      	cmp	r3, #39	; 0x27
 8001548:	d9ef      	bls.n	800152a <SCH_Add_Task+0x12>
	 }

	  SCH_tasks_G[Index].pTask = pFunction;
 800154a:	7dfa      	ldrb	r2, [r7, #23]
 800154c:	491a      	ldr	r1, [pc, #104]	; (80015b8 <SCH_Add_Task+0xa0>)
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	440b      	add	r3, r1
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	601a      	str	r2, [r3, #0]
	  SCH_tasks_G[Index].Delay = DELAY;
 800155c:	7dfa      	ldrb	r2, [r7, #23]
 800155e:	4916      	ldr	r1, [pc, #88]	; (80015b8 <SCH_Add_Task+0xa0>)
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	3304      	adds	r3, #4
 800156c:	68ba      	ldr	r2, [r7, #8]
 800156e:	601a      	str	r2, [r3, #0]
	  SCH_tasks_G[Index].Period =PERIOD;
 8001570:	7dfa      	ldrb	r2, [r7, #23]
 8001572:	4911      	ldr	r1, [pc, #68]	; (80015b8 <SCH_Add_Task+0xa0>)
 8001574:	4613      	mov	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	440b      	add	r3, r1
 800157e:	3308      	adds	r3, #8
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	601a      	str	r2, [r3, #0]
	  SCH_tasks_G[Index].RunMe= 0;
 8001584:	7dfa      	ldrb	r2, [r7, #23]
 8001586:	490c      	ldr	r1, [pc, #48]	; (80015b8 <SCH_Add_Task+0xa0>)
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	440b      	add	r3, r1
 8001592:	330c      	adds	r3, #12
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]

	  SCH_tasks_G[Index].TaskID = Index;
 8001598:	7dfa      	ldrb	r2, [r7, #23]
 800159a:	7df9      	ldrb	r1, [r7, #23]
 800159c:	4806      	ldr	r0, [pc, #24]	; (80015b8 <SCH_Add_Task+0xa0>)
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4403      	add	r3, r0
 80015a8:	3310      	adds	r3, #16
 80015aa:	6019      	str	r1, [r3, #0]
}
 80015ac:	bf00      	nop
 80015ae:	371c      	adds	r7, #28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	2000010c 	.word	0x2000010c

080015bc <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
	uint8_t Index;
	for (Index = 0; Index <SCH_MAX_TASKS; Index++){
 80015c2:	2300      	movs	r3, #0
 80015c4:	71fb      	strb	r3, [r7, #7]
 80015c6:	e039      	b.n	800163c <SCH_Dispatch_Tasks+0x80>
		if (SCH_tasks_G[Index].RunMe> 0) {
 80015c8:	79fa      	ldrb	r2, [r7, #7]
 80015ca:	4920      	ldr	r1, [pc, #128]	; (800164c <SCH_Dispatch_Tasks+0x90>)
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	330c      	adds	r3, #12
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d02b      	beq.n	8001636 <SCH_Dispatch_Tasks+0x7a>
			(*SCH_tasks_G[Index].pTask)();
 80015de:	79fa      	ldrb	r2, [r7, #7]
 80015e0:	491a      	ldr	r1, [pc, #104]	; (800164c <SCH_Dispatch_Tasks+0x90>)
 80015e2:	4613      	mov	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	440b      	add	r3, r1
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4798      	blx	r3
			SCH_tasks_G[Index].RunMe --;
 80015f0:	79fa      	ldrb	r2, [r7, #7]
 80015f2:	4916      	ldr	r1, [pc, #88]	; (800164c <SCH_Dispatch_Tasks+0x90>)
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	330c      	adds	r3, #12
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	3b01      	subs	r3, #1
 8001604:	b2d8      	uxtb	r0, r3
 8001606:	4911      	ldr	r1, [pc, #68]	; (800164c <SCH_Dispatch_Tasks+0x90>)
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	330c      	adds	r3, #12
 8001614:	4602      	mov	r2, r0
 8001616:	701a      	strb	r2, [r3, #0]
			if (SCH_tasks_G[Index].Period == 0)
 8001618:	79fa      	ldrb	r2, [r7, #7]
 800161a:	490c      	ldr	r1, [pc, #48]	; (800164c <SCH_Dispatch_Tasks+0x90>)
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	3308      	adds	r3, #8
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d103      	bne.n	8001636 <SCH_Dispatch_Tasks+0x7a>
			{
			SCH_Delete_Task(Index);
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	4618      	mov	r0, r3
 8001632:	f000 f80d 	bl	8001650 <SCH_Delete_Task>
	for (Index = 0; Index <SCH_MAX_TASKS; Index++){
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	3301      	adds	r3, #1
 800163a:	71fb      	strb	r3, [r7, #7]
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	2b27      	cmp	r3, #39	; 0x27
 8001640:	d9c2      	bls.n	80015c8 <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
}
 8001642:	bf00      	nop
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	2000010c 	.word	0x2000010c

08001650 <SCH_Delete_Task>:

void SCH_Delete_Task (uint32_t TASK_INDEX){
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	 SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 8001658:	4915      	ldr	r1, [pc, #84]	; (80016b0 <SCH_Delete_Task+0x60>)
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
	 SCH_tasks_G[TASK_INDEX]. Delay = 0;
 800166a:	4911      	ldr	r1, [pc, #68]	; (80016b0 <SCH_Delete_Task+0x60>)
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	4613      	mov	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	440b      	add	r3, r1
 8001678:	3304      	adds	r3, #4
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
	 SCH_tasks_G[TASK_INDEX]. Period = 0;
 800167e:	490c      	ldr	r1, [pc, #48]	; (80016b0 <SCH_Delete_Task+0x60>)
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	4613      	mov	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	440b      	add	r3, r1
 800168c:	3308      	adds	r3, #8
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
	 SCH_tasks_G[TASK_INDEX].RunMe = 0;
 8001692:	4907      	ldr	r1, [pc, #28]	; (80016b0 <SCH_Delete_Task+0x60>)
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	4613      	mov	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	440b      	add	r3, r1
 80016a0:	330c      	adds	r3, #12
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	2000010c 	.word	0x2000010c

080016b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_MspInit+0x5c>)
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	4a14      	ldr	r2, [pc, #80]	; (8001710 <HAL_MspInit+0x5c>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6193      	str	r3, [r2, #24]
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_MspInit+0x5c>)
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <HAL_MspInit+0x5c>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <HAL_MspInit+0x5c>)
 80016d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016dc:	61d3      	str	r3, [r2, #28]
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <HAL_MspInit+0x5c>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <HAL_MspInit+0x60>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	4a04      	ldr	r2, [pc, #16]	; (8001714 <HAL_MspInit+0x60>)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	40021000 	.word	0x40021000
 8001714:	40010000 	.word	0x40010000

08001718 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001728:	d113      	bne.n	8001752 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <HAL_TIM_Base_MspInit+0x44>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	4a0b      	ldr	r2, [pc, #44]	; (800175c <HAL_TIM_Base_MspInit+0x44>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	61d3      	str	r3, [r2, #28]
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <HAL_TIM_Base_MspInit+0x44>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2100      	movs	r1, #0
 8001746:	201c      	movs	r0, #28
 8001748:	f000 fa97 	bl	8001c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800174c:	201c      	movs	r0, #28
 800174e:	f000 fab0 	bl	8001cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40021000 	.word	0x40021000

08001760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <NMI_Handler+0x4>

08001766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800176a:	e7fe      	b.n	800176a <HardFault_Handler+0x4>

0800176c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001770:	e7fe      	b.n	8001770 <MemManage_Handler+0x4>

08001772 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001776:	e7fe      	b.n	8001776 <BusFault_Handler+0x4>

08001778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800177c:	e7fe      	b.n	800177c <UsageFault_Handler+0x4>

0800177e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr

0800178a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr

08001796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr

080017a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a6:	f000 f975 	bl	8001a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <TIM2_IRQHandler+0x10>)
 80017b6:	f001 f8d1 	bl	800295c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200000c4 	.word	0x200000c4

080017c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <toggleAllRed>:
#include "global.h"
#include "led7_segment.h"
#include "software_timer.h"


void toggleAllRed(){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, YELLOWB, GPIO_PIN_RESET);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2140      	movs	r1, #64	; 0x40
 80017d8:	480d      	ldr	r0, [pc, #52]	; (8001810 <toggleAllRed+0x40>)
 80017da:	f000 fc16 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREENB, GPIO_PIN_RESET);
 80017de:	2200      	movs	r2, #0
 80017e0:	2180      	movs	r1, #128	; 0x80
 80017e2:	480b      	ldr	r0, [pc, #44]	; (8001810 <toggleAllRed+0x40>)
 80017e4:	f000 fc11 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOWA, GPIO_PIN_RESET);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2104      	movs	r1, #4
 80017ec:	4808      	ldr	r0, [pc, #32]	; (8001810 <toggleAllRed+0x40>)
 80017ee:	f000 fc0c 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREENA, GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2108      	movs	r1, #8
 80017f6:	4806      	ldr	r0, [pc, #24]	; (8001810 <toggleAllRed+0x40>)
 80017f8:	f000 fc07 	bl	800200a <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(GPIOA, REDA);
 80017fc:	2102      	movs	r1, #2
 80017fe:	4804      	ldr	r0, [pc, #16]	; (8001810 <toggleAllRed+0x40>)
 8001800:	f000 fc1b 	bl	800203a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, REDB);
 8001804:	2110      	movs	r1, #16
 8001806:	4802      	ldr	r0, [pc, #8]	; (8001810 <toggleAllRed+0x40>)
 8001808:	f000 fc17 	bl	800203a <HAL_GPIO_TogglePin>
}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40010800 	.word	0x40010800

08001814 <toggleAllGreen>:

void toggleAllGreen(){
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, YELLOWB, GPIO_PIN_RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	2140      	movs	r1, #64	; 0x40
 800181c:	480d      	ldr	r0, [pc, #52]	; (8001854 <toggleAllGreen+0x40>)
 800181e:	f000 fbf4 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, REDB, GPIO_PIN_RESET);
 8001822:	2200      	movs	r2, #0
 8001824:	2110      	movs	r1, #16
 8001826:	480b      	ldr	r0, [pc, #44]	; (8001854 <toggleAllGreen+0x40>)
 8001828:	f000 fbef 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOWA, GPIO_PIN_RESET);
 800182c:	2200      	movs	r2, #0
 800182e:	2104      	movs	r1, #4
 8001830:	4808      	ldr	r0, [pc, #32]	; (8001854 <toggleAllGreen+0x40>)
 8001832:	f000 fbea 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, REDA, GPIO_PIN_RESET);
 8001836:	2200      	movs	r2, #0
 8001838:	2102      	movs	r1, #2
 800183a:	4806      	ldr	r0, [pc, #24]	; (8001854 <toggleAllGreen+0x40>)
 800183c:	f000 fbe5 	bl	800200a <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(GPIOA, GREENA);
 8001840:	2108      	movs	r1, #8
 8001842:	4804      	ldr	r0, [pc, #16]	; (8001854 <toggleAllGreen+0x40>)
 8001844:	f000 fbf9 	bl	800203a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GREENB);
 8001848:	2180      	movs	r1, #128	; 0x80
 800184a:	4802      	ldr	r0, [pc, #8]	; (8001854 <toggleAllGreen+0x40>)
 800184c:	f000 fbf5 	bl	800203a <HAL_GPIO_TogglePin>
}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40010800 	.word	0x40010800

08001858 <toggleAllYellow>:

void toggleAllYellow(){
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GREENB, GPIO_PIN_RESET);
 800185c:	2200      	movs	r2, #0
 800185e:	2180      	movs	r1, #128	; 0x80
 8001860:	480d      	ldr	r0, [pc, #52]	; (8001898 <toggleAllYellow+0x40>)
 8001862:	f000 fbd2 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, REDB, GPIO_PIN_RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	2110      	movs	r1, #16
 800186a:	480b      	ldr	r0, [pc, #44]	; (8001898 <toggleAllYellow+0x40>)
 800186c:	f000 fbcd 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREENA, GPIO_PIN_RESET);
 8001870:	2200      	movs	r2, #0
 8001872:	2108      	movs	r1, #8
 8001874:	4808      	ldr	r0, [pc, #32]	; (8001898 <toggleAllYellow+0x40>)
 8001876:	f000 fbc8 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, REDA, GPIO_PIN_RESET);
 800187a:	2200      	movs	r2, #0
 800187c:	2102      	movs	r1, #2
 800187e:	4806      	ldr	r0, [pc, #24]	; (8001898 <toggleAllYellow+0x40>)
 8001880:	f000 fbc3 	bl	800200a <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(GPIOA, YELLOWA);
 8001884:	2104      	movs	r1, #4
 8001886:	4804      	ldr	r0, [pc, #16]	; (8001898 <toggleAllYellow+0x40>)
 8001888:	f000 fbd7 	bl	800203a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, YELLOWB);
 800188c:	2140      	movs	r1, #64	; 0x40
 800188e:	4802      	ldr	r0, [pc, #8]	; (8001898 <toggleAllYellow+0x40>)
 8001890:	f000 fbd3 	bl	800203a <HAL_GPIO_TogglePin>
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40010800 	.word	0x40010800

0800189c <setRedAGreenB>:

void setRedAGreenB()
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, REDA, GPIO_PIN_SET);
 80018a0:	2201      	movs	r2, #1
 80018a2:	2102      	movs	r1, #2
 80018a4:	480e      	ldr	r0, [pc, #56]	; (80018e0 <setRedAGreenB+0x44>)
 80018a6:	f000 fbb0 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOWA, GPIO_PIN_RESET);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2104      	movs	r1, #4
 80018ae:	480c      	ldr	r0, [pc, #48]	; (80018e0 <setRedAGreenB+0x44>)
 80018b0:	f000 fbab 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREENA, GPIO_PIN_RESET);
 80018b4:	2200      	movs	r2, #0
 80018b6:	2108      	movs	r1, #8
 80018b8:	4809      	ldr	r0, [pc, #36]	; (80018e0 <setRedAGreenB+0x44>)
 80018ba:	f000 fba6 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, REDB, GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	2110      	movs	r1, #16
 80018c2:	4807      	ldr	r0, [pc, #28]	; (80018e0 <setRedAGreenB+0x44>)
 80018c4:	f000 fba1 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOWB, GPIO_PIN_RESET);
 80018c8:	2200      	movs	r2, #0
 80018ca:	2140      	movs	r1, #64	; 0x40
 80018cc:	4804      	ldr	r0, [pc, #16]	; (80018e0 <setRedAGreenB+0x44>)
 80018ce:	f000 fb9c 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREENB, GPIO_PIN_SET);
 80018d2:	2201      	movs	r2, #1
 80018d4:	2180      	movs	r1, #128	; 0x80
 80018d6:	4802      	ldr	r0, [pc, #8]	; (80018e0 <setRedAGreenB+0x44>)
 80018d8:	f000 fb97 	bl	800200a <HAL_GPIO_WritePin>
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40010800 	.word	0x40010800

080018e4 <setRedAYellowB>:

void setRedAYellowB()
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, REDA, GPIO_PIN_SET);
 80018e8:	2201      	movs	r2, #1
 80018ea:	2102      	movs	r1, #2
 80018ec:	480e      	ldr	r0, [pc, #56]	; (8001928 <setRedAYellowB+0x44>)
 80018ee:	f000 fb8c 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOWA, GPIO_PIN_RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2104      	movs	r1, #4
 80018f6:	480c      	ldr	r0, [pc, #48]	; (8001928 <setRedAYellowB+0x44>)
 80018f8:	f000 fb87 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREENA, GPIO_PIN_RESET);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2108      	movs	r1, #8
 8001900:	4809      	ldr	r0, [pc, #36]	; (8001928 <setRedAYellowB+0x44>)
 8001902:	f000 fb82 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, REDB, GPIO_PIN_RESET);
 8001906:	2200      	movs	r2, #0
 8001908:	2110      	movs	r1, #16
 800190a:	4807      	ldr	r0, [pc, #28]	; (8001928 <setRedAYellowB+0x44>)
 800190c:	f000 fb7d 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOWB, GPIO_PIN_SET);
 8001910:	2201      	movs	r2, #1
 8001912:	2140      	movs	r1, #64	; 0x40
 8001914:	4804      	ldr	r0, [pc, #16]	; (8001928 <setRedAYellowB+0x44>)
 8001916:	f000 fb78 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREENB, GPIO_PIN_RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	2180      	movs	r1, #128	; 0x80
 800191e:	4802      	ldr	r0, [pc, #8]	; (8001928 <setRedAYellowB+0x44>)
 8001920:	f000 fb73 	bl	800200a <HAL_GPIO_WritePin>
}
 8001924:	bf00      	nop
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40010800 	.word	0x40010800

0800192c <setGreenARedB>:

void setGreenARedB()
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, REDA, GPIO_PIN_RESET);
 8001930:	2200      	movs	r2, #0
 8001932:	2102      	movs	r1, #2
 8001934:	480e      	ldr	r0, [pc, #56]	; (8001970 <setGreenARedB+0x44>)
 8001936:	f000 fb68 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOWA, GPIO_PIN_RESET);
 800193a:	2200      	movs	r2, #0
 800193c:	2104      	movs	r1, #4
 800193e:	480c      	ldr	r0, [pc, #48]	; (8001970 <setGreenARedB+0x44>)
 8001940:	f000 fb63 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREENA, GPIO_PIN_SET);
 8001944:	2201      	movs	r2, #1
 8001946:	2108      	movs	r1, #8
 8001948:	4809      	ldr	r0, [pc, #36]	; (8001970 <setGreenARedB+0x44>)
 800194a:	f000 fb5e 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, REDB, GPIO_PIN_SET);
 800194e:	2201      	movs	r2, #1
 8001950:	2110      	movs	r1, #16
 8001952:	4807      	ldr	r0, [pc, #28]	; (8001970 <setGreenARedB+0x44>)
 8001954:	f000 fb59 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOWB, GPIO_PIN_RESET);
 8001958:	2200      	movs	r2, #0
 800195a:	2140      	movs	r1, #64	; 0x40
 800195c:	4804      	ldr	r0, [pc, #16]	; (8001970 <setGreenARedB+0x44>)
 800195e:	f000 fb54 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREENB, GPIO_PIN_RESET);
 8001962:	2200      	movs	r2, #0
 8001964:	2180      	movs	r1, #128	; 0x80
 8001966:	4802      	ldr	r0, [pc, #8]	; (8001970 <setGreenARedB+0x44>)
 8001968:	f000 fb4f 	bl	800200a <HAL_GPIO_WritePin>
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40010800 	.word	0x40010800

08001974 <setYellowARedB>:

void setYellowARedB()
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, REDA, GPIO_PIN_RESET);
 8001978:	2200      	movs	r2, #0
 800197a:	2102      	movs	r1, #2
 800197c:	480e      	ldr	r0, [pc, #56]	; (80019b8 <setYellowARedB+0x44>)
 800197e:	f000 fb44 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOWA, GPIO_PIN_SET);
 8001982:	2201      	movs	r2, #1
 8001984:	2104      	movs	r1, #4
 8001986:	480c      	ldr	r0, [pc, #48]	; (80019b8 <setYellowARedB+0x44>)
 8001988:	f000 fb3f 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREENA, GPIO_PIN_RESET);
 800198c:	2200      	movs	r2, #0
 800198e:	2108      	movs	r1, #8
 8001990:	4809      	ldr	r0, [pc, #36]	; (80019b8 <setYellowARedB+0x44>)
 8001992:	f000 fb3a 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, REDB, GPIO_PIN_SET);
 8001996:	2201      	movs	r2, #1
 8001998:	2110      	movs	r1, #16
 800199a:	4807      	ldr	r0, [pc, #28]	; (80019b8 <setYellowARedB+0x44>)
 800199c:	f000 fb35 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOWB, GPIO_PIN_RESET);
 80019a0:	2200      	movs	r2, #0
 80019a2:	2140      	movs	r1, #64	; 0x40
 80019a4:	4804      	ldr	r0, [pc, #16]	; (80019b8 <setYellowARedB+0x44>)
 80019a6:	f000 fb30 	bl	800200a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREENB, GPIO_PIN_RESET);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2180      	movs	r1, #128	; 0x80
 80019ae:	4802      	ldr	r0, [pc, #8]	; (80019b8 <setYellowARedB+0x44>)
 80019b0:	f000 fb2b 	bl	800200a <HAL_GPIO_WritePin>
}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40010800 	.word	0x40010800

080019bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019bc:	f7ff ff02 	bl	80017c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c0:	480b      	ldr	r0, [pc, #44]	; (80019f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019c2:	490c      	ldr	r1, [pc, #48]	; (80019f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019c4:	4a0c      	ldr	r2, [pc, #48]	; (80019f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c8:	e002      	b.n	80019d0 <LoopCopyDataInit>

080019ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ce:	3304      	adds	r3, #4

080019d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d4:	d3f9      	bcc.n	80019ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d6:	4a09      	ldr	r2, [pc, #36]	; (80019fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019d8:	4c09      	ldr	r4, [pc, #36]	; (8001a00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019dc:	e001      	b.n	80019e2 <LoopFillZerobss>

080019de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e0:	3204      	adds	r2, #4

080019e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e4:	d3fb      	bcc.n	80019de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019e6:	f001 faf9 	bl	8002fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ea:	f7ff fbe3 	bl	80011b4 <main>
  bx lr
 80019ee:	4770      	bx	lr
  ldr r0, =_sdata
 80019f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80019f8:	08003078 	.word	0x08003078
  ldr r2, =_sbss
 80019fc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001a00:	20000430 	.word	0x20000430

08001a04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a04:	e7fe      	b.n	8001a04 <ADC1_2_IRQHandler>
	...

08001a08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <HAL_Init+0x28>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a07      	ldr	r2, [pc, #28]	; (8001a30 <HAL_Init+0x28>)
 8001a12:	f043 0310 	orr.w	r3, r3, #16
 8001a16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a18:	2003      	movs	r0, #3
 8001a1a:	f000 f923 	bl	8001c64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a1e:	200f      	movs	r0, #15
 8001a20:	f000 f808 	bl	8001a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a24:	f7ff fe46 	bl	80016b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40022000 	.word	0x40022000

08001a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_InitTick+0x54>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <HAL_InitTick+0x58>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	4619      	mov	r1, r3
 8001a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 f93b 	bl	8001cce <HAL_SYSTICK_Config>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e00e      	b.n	8001a80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b0f      	cmp	r3, #15
 8001a66:	d80a      	bhi.n	8001a7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a70:	f000 f903 	bl	8001c7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a74:	4a06      	ldr	r2, [pc, #24]	; (8001a90 <HAL_InitTick+0x5c>)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	e000      	b.n	8001a80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000058 	.word	0x20000058
 8001a8c:	20000060 	.word	0x20000060
 8001a90:	2000005c 	.word	0x2000005c

08001a94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_IncTick+0x1c>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_IncTick+0x20>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	4a03      	ldr	r2, [pc, #12]	; (8001ab4 <HAL_IncTick+0x20>)
 8001aa6:	6013      	str	r3, [r2, #0]
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr
 8001ab0:	20000060 	.word	0x20000060
 8001ab4:	2000042c 	.word	0x2000042c

08001ab8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return uwTick;
 8001abc:	4b02      	ldr	r3, [pc, #8]	; (8001ac8 <HAL_GetTick+0x10>)
 8001abe:	681b      	ldr	r3, [r3, #0]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr
 8001ac8:	2000042c 	.word	0x2000042c

08001acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <__NVIC_SetPriorityGrouping+0x44>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001afe:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <__NVIC_SetPriorityGrouping+0x44>)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	60d3      	str	r3, [r2, #12]
}
 8001b04:	bf00      	nop
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <__NVIC_GetPriorityGrouping+0x18>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	0a1b      	lsrs	r3, r3, #8
 8001b1e:	f003 0307 	and.w	r3, r3, #7
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	db0b      	blt.n	8001b5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	f003 021f 	and.w	r2, r3, #31
 8001b48:	4906      	ldr	r1, [pc, #24]	; (8001b64 <__NVIC_EnableIRQ+0x34>)
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	095b      	lsrs	r3, r3, #5
 8001b50:	2001      	movs	r0, #1
 8001b52:	fa00 f202 	lsl.w	r2, r0, r2
 8001b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr
 8001b64:	e000e100 	.word	0xe000e100

08001b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	6039      	str	r1, [r7, #0]
 8001b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	db0a      	blt.n	8001b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	490c      	ldr	r1, [pc, #48]	; (8001bb4 <__NVIC_SetPriority+0x4c>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	0112      	lsls	r2, r2, #4
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b90:	e00a      	b.n	8001ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4908      	ldr	r1, [pc, #32]	; (8001bb8 <__NVIC_SetPriority+0x50>)
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	3b04      	subs	r3, #4
 8001ba0:	0112      	lsls	r2, r2, #4
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	761a      	strb	r2, [r3, #24]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000e100 	.word	0xe000e100
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b089      	sub	sp, #36	; 0x24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f1c3 0307 	rsb	r3, r3, #7
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	bf28      	it	cs
 8001bda:	2304      	movcs	r3, #4
 8001bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3304      	adds	r3, #4
 8001be2:	2b06      	cmp	r3, #6
 8001be4:	d902      	bls.n	8001bec <NVIC_EncodePriority+0x30>
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3b03      	subs	r3, #3
 8001bea:	e000      	b.n	8001bee <NVIC_EncodePriority+0x32>
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	401a      	ands	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c04:	f04f 31ff 	mov.w	r1, #4294967295
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0e:	43d9      	mvns	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	4313      	orrs	r3, r2
         );
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3724      	adds	r7, #36	; 0x24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c30:	d301      	bcc.n	8001c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c32:	2301      	movs	r3, #1
 8001c34:	e00f      	b.n	8001c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c36:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <SysTick_Config+0x40>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c3e:	210f      	movs	r1, #15
 8001c40:	f04f 30ff 	mov.w	r0, #4294967295
 8001c44:	f7ff ff90 	bl	8001b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <SysTick_Config+0x40>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4e:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <SysTick_Config+0x40>)
 8001c50:	2207      	movs	r2, #7
 8001c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	e000e010 	.word	0xe000e010

08001c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff ff2d 	bl	8001acc <__NVIC_SetPriorityGrouping>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b086      	sub	sp, #24
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4603      	mov	r3, r0
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c8c:	f7ff ff42 	bl	8001b14 <__NVIC_GetPriorityGrouping>
 8001c90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	6978      	ldr	r0, [r7, #20]
 8001c98:	f7ff ff90 	bl	8001bbc <NVIC_EncodePriority>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff5f 	bl	8001b68 <__NVIC_SetPriority>
}
 8001caa:	bf00      	nop
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	4603      	mov	r3, r0
 8001cba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff35 	bl	8001b30 <__NVIC_EnableIRQ>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff ffa2 	bl	8001c20 <SysTick_Config>
 8001cdc:	4603      	mov	r3, r0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b08b      	sub	sp, #44	; 0x2c
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cfa:	e148      	b.n	8001f8e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	69fa      	ldr	r2, [r7, #28]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	f040 8137 	bne.w	8001f88 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	4aa3      	ldr	r2, [pc, #652]	; (8001fac <HAL_GPIO_Init+0x2c4>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d05e      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
 8001d24:	4aa1      	ldr	r2, [pc, #644]	; (8001fac <HAL_GPIO_Init+0x2c4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d875      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d2a:	4aa1      	ldr	r2, [pc, #644]	; (8001fb0 <HAL_GPIO_Init+0x2c8>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d058      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
 8001d30:	4a9f      	ldr	r2, [pc, #636]	; (8001fb0 <HAL_GPIO_Init+0x2c8>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d86f      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d36:	4a9f      	ldr	r2, [pc, #636]	; (8001fb4 <HAL_GPIO_Init+0x2cc>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d052      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
 8001d3c:	4a9d      	ldr	r2, [pc, #628]	; (8001fb4 <HAL_GPIO_Init+0x2cc>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d869      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d42:	4a9d      	ldr	r2, [pc, #628]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d04c      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
 8001d48:	4a9b      	ldr	r2, [pc, #620]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d863      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d4e:	4a9b      	ldr	r2, [pc, #620]	; (8001fbc <HAL_GPIO_Init+0x2d4>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d046      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
 8001d54:	4a99      	ldr	r2, [pc, #612]	; (8001fbc <HAL_GPIO_Init+0x2d4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d85d      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d5a:	2b12      	cmp	r3, #18
 8001d5c:	d82a      	bhi.n	8001db4 <HAL_GPIO_Init+0xcc>
 8001d5e:	2b12      	cmp	r3, #18
 8001d60:	d859      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d62:	a201      	add	r2, pc, #4	; (adr r2, 8001d68 <HAL_GPIO_Init+0x80>)
 8001d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d68:	08001de3 	.word	0x08001de3
 8001d6c:	08001dbd 	.word	0x08001dbd
 8001d70:	08001dcf 	.word	0x08001dcf
 8001d74:	08001e11 	.word	0x08001e11
 8001d78:	08001e17 	.word	0x08001e17
 8001d7c:	08001e17 	.word	0x08001e17
 8001d80:	08001e17 	.word	0x08001e17
 8001d84:	08001e17 	.word	0x08001e17
 8001d88:	08001e17 	.word	0x08001e17
 8001d8c:	08001e17 	.word	0x08001e17
 8001d90:	08001e17 	.word	0x08001e17
 8001d94:	08001e17 	.word	0x08001e17
 8001d98:	08001e17 	.word	0x08001e17
 8001d9c:	08001e17 	.word	0x08001e17
 8001da0:	08001e17 	.word	0x08001e17
 8001da4:	08001e17 	.word	0x08001e17
 8001da8:	08001e17 	.word	0x08001e17
 8001dac:	08001dc5 	.word	0x08001dc5
 8001db0:	08001dd9 	.word	0x08001dd9
 8001db4:	4a82      	ldr	r2, [pc, #520]	; (8001fc0 <HAL_GPIO_Init+0x2d8>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d013      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dba:	e02c      	b.n	8001e16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	623b      	str	r3, [r7, #32]
          break;
 8001dc2:	e029      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	623b      	str	r3, [r7, #32]
          break;
 8001dcc:	e024      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	3308      	adds	r3, #8
 8001dd4:	623b      	str	r3, [r7, #32]
          break;
 8001dd6:	e01f      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	330c      	adds	r3, #12
 8001dde:	623b      	str	r3, [r7, #32]
          break;
 8001de0:	e01a      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d102      	bne.n	8001df0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dea:	2304      	movs	r3, #4
 8001dec:	623b      	str	r3, [r7, #32]
          break;
 8001dee:	e013      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d105      	bne.n	8001e04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001df8:	2308      	movs	r3, #8
 8001dfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69fa      	ldr	r2, [r7, #28]
 8001e00:	611a      	str	r2, [r3, #16]
          break;
 8001e02:	e009      	b.n	8001e18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e04:	2308      	movs	r3, #8
 8001e06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69fa      	ldr	r2, [r7, #28]
 8001e0c:	615a      	str	r2, [r3, #20]
          break;
 8001e0e:	e003      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e10:	2300      	movs	r3, #0
 8001e12:	623b      	str	r3, [r7, #32]
          break;
 8001e14:	e000      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          break;
 8001e16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	2bff      	cmp	r3, #255	; 0xff
 8001e1c:	d801      	bhi.n	8001e22 <HAL_GPIO_Init+0x13a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	e001      	b.n	8001e26 <HAL_GPIO_Init+0x13e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3304      	adds	r3, #4
 8001e26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	2bff      	cmp	r3, #255	; 0xff
 8001e2c:	d802      	bhi.n	8001e34 <HAL_GPIO_Init+0x14c>
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	e002      	b.n	8001e3a <HAL_GPIO_Init+0x152>
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	3b08      	subs	r3, #8
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	210f      	movs	r1, #15
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	fa01 f303 	lsl.w	r3, r1, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	6a39      	ldr	r1, [r7, #32]
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	fa01 f303 	lsl.w	r3, r1, r3
 8001e54:	431a      	orrs	r2, r3
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 8090 	beq.w	8001f88 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e68:	4b56      	ldr	r3, [pc, #344]	; (8001fc4 <HAL_GPIO_Init+0x2dc>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	4a55      	ldr	r2, [pc, #340]	; (8001fc4 <HAL_GPIO_Init+0x2dc>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6193      	str	r3, [r2, #24]
 8001e74:	4b53      	ldr	r3, [pc, #332]	; (8001fc4 <HAL_GPIO_Init+0x2dc>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e80:	4a51      	ldr	r2, [pc, #324]	; (8001fc8 <HAL_GPIO_Init+0x2e0>)
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	089b      	lsrs	r3, r3, #2
 8001e86:	3302      	adds	r3, #2
 8001e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	220f      	movs	r2, #15
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a49      	ldr	r2, [pc, #292]	; (8001fcc <HAL_GPIO_Init+0x2e4>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d00d      	beq.n	8001ec8 <HAL_GPIO_Init+0x1e0>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a48      	ldr	r2, [pc, #288]	; (8001fd0 <HAL_GPIO_Init+0x2e8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d007      	beq.n	8001ec4 <HAL_GPIO_Init+0x1dc>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a47      	ldr	r2, [pc, #284]	; (8001fd4 <HAL_GPIO_Init+0x2ec>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d101      	bne.n	8001ec0 <HAL_GPIO_Init+0x1d8>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	e004      	b.n	8001eca <HAL_GPIO_Init+0x1e2>
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e002      	b.n	8001eca <HAL_GPIO_Init+0x1e2>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <HAL_GPIO_Init+0x1e2>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ecc:	f002 0203 	and.w	r2, r2, #3
 8001ed0:	0092      	lsls	r2, r2, #2
 8001ed2:	4093      	lsls	r3, r2
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001eda:	493b      	ldr	r1, [pc, #236]	; (8001fc8 <HAL_GPIO_Init+0x2e0>)
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	089b      	lsrs	r3, r3, #2
 8001ee0:	3302      	adds	r3, #2
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d006      	beq.n	8001f02 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ef4:	4b38      	ldr	r3, [pc, #224]	; (8001fd8 <HAL_GPIO_Init+0x2f0>)
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	4937      	ldr	r1, [pc, #220]	; (8001fd8 <HAL_GPIO_Init+0x2f0>)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	608b      	str	r3, [r1, #8]
 8001f00:	e006      	b.n	8001f10 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f02:	4b35      	ldr	r3, [pc, #212]	; (8001fd8 <HAL_GPIO_Init+0x2f0>)
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	4933      	ldr	r1, [pc, #204]	; (8001fd8 <HAL_GPIO_Init+0x2f0>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d006      	beq.n	8001f2a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f1c:	4b2e      	ldr	r3, [pc, #184]	; (8001fd8 <HAL_GPIO_Init+0x2f0>)
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	492d      	ldr	r1, [pc, #180]	; (8001fd8 <HAL_GPIO_Init+0x2f0>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	60cb      	str	r3, [r1, #12]
 8001f28:	e006      	b.n	8001f38 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f2a:	4b2b      	ldr	r3, [pc, #172]	; (8001fd8 <HAL_GPIO_Init+0x2f0>)
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	4929      	ldr	r1, [pc, #164]	; (8001fd8 <HAL_GPIO_Init+0x2f0>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d006      	beq.n	8001f52 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f44:	4b24      	ldr	r3, [pc, #144]	; (8001fd8 <HAL_GPIO_Init+0x2f0>)
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	4923      	ldr	r1, [pc, #140]	; (8001fd8 <HAL_GPIO_Init+0x2f0>)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	604b      	str	r3, [r1, #4]
 8001f50:	e006      	b.n	8001f60 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f52:	4b21      	ldr	r3, [pc, #132]	; (8001fd8 <HAL_GPIO_Init+0x2f0>)
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	491f      	ldr	r1, [pc, #124]	; (8001fd8 <HAL_GPIO_Init+0x2f0>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d006      	beq.n	8001f7a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f6c:	4b1a      	ldr	r3, [pc, #104]	; (8001fd8 <HAL_GPIO_Init+0x2f0>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4919      	ldr	r1, [pc, #100]	; (8001fd8 <HAL_GPIO_Init+0x2f0>)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	600b      	str	r3, [r1, #0]
 8001f78:	e006      	b.n	8001f88 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f7a:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <HAL_GPIO_Init+0x2f0>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	4915      	ldr	r1, [pc, #84]	; (8001fd8 <HAL_GPIO_Init+0x2f0>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	fa22 f303 	lsr.w	r3, r2, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f47f aeaf 	bne.w	8001cfc <HAL_GPIO_Init+0x14>
  }
}
 8001f9e:	bf00      	nop
 8001fa0:	bf00      	nop
 8001fa2:	372c      	adds	r7, #44	; 0x2c
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	10320000 	.word	0x10320000
 8001fb0:	10310000 	.word	0x10310000
 8001fb4:	10220000 	.word	0x10220000
 8001fb8:	10210000 	.word	0x10210000
 8001fbc:	10120000 	.word	0x10120000
 8001fc0:	10110000 	.word	0x10110000
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40010000 	.word	0x40010000
 8001fcc:	40010800 	.word	0x40010800
 8001fd0:	40010c00 	.word	0x40010c00
 8001fd4:	40011000 	.word	0x40011000
 8001fd8:	40010400 	.word	0x40010400

08001fdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	887b      	ldrh	r3, [r7, #2]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d002      	beq.n	8001ffa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	73fb      	strb	r3, [r7, #15]
 8001ff8:	e001      	b.n	8001ffe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr

0800200a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	460b      	mov	r3, r1
 8002014:	807b      	strh	r3, [r7, #2]
 8002016:	4613      	mov	r3, r2
 8002018:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800201a:	787b      	ldrb	r3, [r7, #1]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002020:	887a      	ldrh	r2, [r7, #2]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002026:	e003      	b.n	8002030 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002028:	887b      	ldrh	r3, [r7, #2]
 800202a:	041a      	lsls	r2, r3, #16
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	611a      	str	r2, [r3, #16]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr

0800203a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800203a:	b480      	push	{r7}
 800203c:	b085      	sub	sp, #20
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	460b      	mov	r3, r1
 8002044:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800204c:	887a      	ldrh	r2, [r7, #2]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4013      	ands	r3, r2
 8002052:	041a      	lsls	r2, r3, #16
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	43d9      	mvns	r1, r3
 8002058:	887b      	ldrh	r3, [r7, #2]
 800205a:	400b      	ands	r3, r1
 800205c:	431a      	orrs	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	611a      	str	r2, [r3, #16]
}
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e26c      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 8087 	beq.w	800219a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800208c:	4b92      	ldr	r3, [pc, #584]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 030c 	and.w	r3, r3, #12
 8002094:	2b04      	cmp	r3, #4
 8002096:	d00c      	beq.n	80020b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002098:	4b8f      	ldr	r3, [pc, #572]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 030c 	and.w	r3, r3, #12
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d112      	bne.n	80020ca <HAL_RCC_OscConfig+0x5e>
 80020a4:	4b8c      	ldr	r3, [pc, #560]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b0:	d10b      	bne.n	80020ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b2:	4b89      	ldr	r3, [pc, #548]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d06c      	beq.n	8002198 <HAL_RCC_OscConfig+0x12c>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d168      	bne.n	8002198 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e246      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d2:	d106      	bne.n	80020e2 <HAL_RCC_OscConfig+0x76>
 80020d4:	4b80      	ldr	r3, [pc, #512]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a7f      	ldr	r2, [pc, #508]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80020da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	e02e      	b.n	8002140 <HAL_RCC_OscConfig+0xd4>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10c      	bne.n	8002104 <HAL_RCC_OscConfig+0x98>
 80020ea:	4b7b      	ldr	r3, [pc, #492]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a7a      	ldr	r2, [pc, #488]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	4b78      	ldr	r3, [pc, #480]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a77      	ldr	r2, [pc, #476]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	e01d      	b.n	8002140 <HAL_RCC_OscConfig+0xd4>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800210c:	d10c      	bne.n	8002128 <HAL_RCC_OscConfig+0xbc>
 800210e:	4b72      	ldr	r3, [pc, #456]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a71      	ldr	r2, [pc, #452]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 8002114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	4b6f      	ldr	r3, [pc, #444]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a6e      	ldr	r2, [pc, #440]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 8002120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	e00b      	b.n	8002140 <HAL_RCC_OscConfig+0xd4>
 8002128:	4b6b      	ldr	r3, [pc, #428]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a6a      	ldr	r2, [pc, #424]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 800212e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002132:	6013      	str	r3, [r2, #0]
 8002134:	4b68      	ldr	r3, [pc, #416]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a67      	ldr	r2, [pc, #412]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 800213a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800213e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d013      	beq.n	8002170 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7ff fcb6 	bl	8001ab8 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002150:	f7ff fcb2 	bl	8001ab8 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b64      	cmp	r3, #100	; 0x64
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e1fa      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002162:	4b5d      	ldr	r3, [pc, #372]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f0      	beq.n	8002150 <HAL_RCC_OscConfig+0xe4>
 800216e:	e014      	b.n	800219a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7ff fca2 	bl	8001ab8 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002178:	f7ff fc9e 	bl	8001ab8 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b64      	cmp	r3, #100	; 0x64
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e1e6      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800218a:	4b53      	ldr	r3, [pc, #332]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x10c>
 8002196:	e000      	b.n	800219a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d063      	beq.n	800226e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021a6:	4b4c      	ldr	r3, [pc, #304]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 030c 	and.w	r3, r3, #12
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00b      	beq.n	80021ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021b2:	4b49      	ldr	r3, [pc, #292]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d11c      	bne.n	80021f8 <HAL_RCC_OscConfig+0x18c>
 80021be:	4b46      	ldr	r3, [pc, #280]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d116      	bne.n	80021f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ca:	4b43      	ldr	r3, [pc, #268]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d005      	beq.n	80021e2 <HAL_RCC_OscConfig+0x176>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d001      	beq.n	80021e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e1ba      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e2:	4b3d      	ldr	r3, [pc, #244]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	4939      	ldr	r1, [pc, #228]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f6:	e03a      	b.n	800226e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d020      	beq.n	8002242 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002200:	4b36      	ldr	r3, [pc, #216]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 8002202:	2201      	movs	r2, #1
 8002204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002206:	f7ff fc57 	bl	8001ab8 <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800220e:	f7ff fc53 	bl	8001ab8 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e19b      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002220:	4b2d      	ldr	r3, [pc, #180]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0f0      	beq.n	800220e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222c:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	4927      	ldr	r1, [pc, #156]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 800223c:	4313      	orrs	r3, r2
 800223e:	600b      	str	r3, [r1, #0]
 8002240:	e015      	b.n	800226e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002242:	4b26      	ldr	r3, [pc, #152]	; (80022dc <HAL_RCC_OscConfig+0x270>)
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002248:	f7ff fc36 	bl	8001ab8 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002250:	f7ff fc32 	bl	8001ab8 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e17a      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002262:	4b1d      	ldr	r3, [pc, #116]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	2b00      	cmp	r3, #0
 8002278:	d03a      	beq.n	80022f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d019      	beq.n	80022b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002282:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <HAL_RCC_OscConfig+0x274>)
 8002284:	2201      	movs	r2, #1
 8002286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002288:	f7ff fc16 	bl	8001ab8 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002290:	f7ff fc12 	bl	8001ab8 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e15a      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a2:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022ae:	2001      	movs	r0, #1
 80022b0:	f000 fa9a 	bl	80027e8 <RCC_Delay>
 80022b4:	e01c      	b.n	80022f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022b6:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <HAL_RCC_OscConfig+0x274>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022bc:	f7ff fbfc 	bl	8001ab8 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c2:	e00f      	b.n	80022e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c4:	f7ff fbf8 	bl	8001ab8 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d908      	bls.n	80022e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e140      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000
 80022dc:	42420000 	.word	0x42420000
 80022e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e4:	4b9e      	ldr	r3, [pc, #632]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1e9      	bne.n	80022c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 80a6 	beq.w	800244a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022fe:	2300      	movs	r3, #0
 8002300:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002302:	4b97      	ldr	r3, [pc, #604]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10d      	bne.n	800232a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800230e:	4b94      	ldr	r3, [pc, #592]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	4a93      	ldr	r2, [pc, #588]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 8002314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002318:	61d3      	str	r3, [r2, #28]
 800231a:	4b91      	ldr	r3, [pc, #580]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002326:	2301      	movs	r3, #1
 8002328:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232a:	4b8e      	ldr	r3, [pc, #568]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002332:	2b00      	cmp	r3, #0
 8002334:	d118      	bne.n	8002368 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002336:	4b8b      	ldr	r3, [pc, #556]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a8a      	ldr	r2, [pc, #552]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 800233c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002342:	f7ff fbb9 	bl	8001ab8 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800234a:	f7ff fbb5 	bl	8001ab8 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b64      	cmp	r3, #100	; 0x64
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e0fd      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235c:	4b81      	ldr	r3, [pc, #516]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0f0      	beq.n	800234a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d106      	bne.n	800237e <HAL_RCC_OscConfig+0x312>
 8002370:	4b7b      	ldr	r3, [pc, #492]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	4a7a      	ldr	r2, [pc, #488]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	6213      	str	r3, [r2, #32]
 800237c:	e02d      	b.n	80023da <HAL_RCC_OscConfig+0x36e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10c      	bne.n	80023a0 <HAL_RCC_OscConfig+0x334>
 8002386:	4b76      	ldr	r3, [pc, #472]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	4a75      	ldr	r2, [pc, #468]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 800238c:	f023 0301 	bic.w	r3, r3, #1
 8002390:	6213      	str	r3, [r2, #32]
 8002392:	4b73      	ldr	r3, [pc, #460]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	4a72      	ldr	r2, [pc, #456]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 8002398:	f023 0304 	bic.w	r3, r3, #4
 800239c:	6213      	str	r3, [r2, #32]
 800239e:	e01c      	b.n	80023da <HAL_RCC_OscConfig+0x36e>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	2b05      	cmp	r3, #5
 80023a6:	d10c      	bne.n	80023c2 <HAL_RCC_OscConfig+0x356>
 80023a8:	4b6d      	ldr	r3, [pc, #436]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	4a6c      	ldr	r2, [pc, #432]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 80023ae:	f043 0304 	orr.w	r3, r3, #4
 80023b2:	6213      	str	r3, [r2, #32]
 80023b4:	4b6a      	ldr	r3, [pc, #424]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	4a69      	ldr	r2, [pc, #420]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	6213      	str	r3, [r2, #32]
 80023c0:	e00b      	b.n	80023da <HAL_RCC_OscConfig+0x36e>
 80023c2:	4b67      	ldr	r3, [pc, #412]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	4a66      	ldr	r2, [pc, #408]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 80023c8:	f023 0301 	bic.w	r3, r3, #1
 80023cc:	6213      	str	r3, [r2, #32]
 80023ce:	4b64      	ldr	r3, [pc, #400]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	4a63      	ldr	r2, [pc, #396]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 80023d4:	f023 0304 	bic.w	r3, r3, #4
 80023d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d015      	beq.n	800240e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e2:	f7ff fb69 	bl	8001ab8 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e8:	e00a      	b.n	8002400 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ea:	f7ff fb65 	bl	8001ab8 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e0ab      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002400:	4b57      	ldr	r3, [pc, #348]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0ee      	beq.n	80023ea <HAL_RCC_OscConfig+0x37e>
 800240c:	e014      	b.n	8002438 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240e:	f7ff fb53 	bl	8001ab8 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002414:	e00a      	b.n	800242c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002416:	f7ff fb4f 	bl	8001ab8 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	f241 3288 	movw	r2, #5000	; 0x1388
 8002424:	4293      	cmp	r3, r2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e095      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800242c:	4b4c      	ldr	r3, [pc, #304]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1ee      	bne.n	8002416 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002438:	7dfb      	ldrb	r3, [r7, #23]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d105      	bne.n	800244a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800243e:	4b48      	ldr	r3, [pc, #288]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	4a47      	ldr	r2, [pc, #284]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 8002444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002448:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 8081 	beq.w	8002556 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002454:	4b42      	ldr	r3, [pc, #264]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 030c 	and.w	r3, r3, #12
 800245c:	2b08      	cmp	r3, #8
 800245e:	d061      	beq.n	8002524 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d146      	bne.n	80024f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002468:	4b3f      	ldr	r3, [pc, #252]	; (8002568 <HAL_RCC_OscConfig+0x4fc>)
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246e:	f7ff fb23 	bl	8001ab8 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002476:	f7ff fb1f 	bl	8001ab8 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e067      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002488:	4b35      	ldr	r3, [pc, #212]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1f0      	bne.n	8002476 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800249c:	d108      	bne.n	80024b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800249e:	4b30      	ldr	r3, [pc, #192]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	492d      	ldr	r1, [pc, #180]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024b0:	4b2b      	ldr	r3, [pc, #172]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a19      	ldr	r1, [r3, #32]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	430b      	orrs	r3, r1
 80024c2:	4927      	ldr	r1, [pc, #156]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c8:	4b27      	ldr	r3, [pc, #156]	; (8002568 <HAL_RCC_OscConfig+0x4fc>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ce:	f7ff faf3 	bl	8001ab8 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d6:	f7ff faef 	bl	8001ab8 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e037      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024e8:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCC_OscConfig+0x46a>
 80024f4:	e02f      	b.n	8002556 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f6:	4b1c      	ldr	r3, [pc, #112]	; (8002568 <HAL_RCC_OscConfig+0x4fc>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fc:	f7ff fadc 	bl	8001ab8 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002504:	f7ff fad8 	bl	8001ab8 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e020      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002516:	4b12      	ldr	r3, [pc, #72]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0x498>
 8002522:	e018      	b.n	8002556 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d101      	bne.n	8002530 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e013      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <HAL_RCC_OscConfig+0x4f4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	429a      	cmp	r2, r3
 8002542:	d106      	bne.n	8002552 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800254e:	429a      	cmp	r2, r3
 8002550:	d001      	beq.n	8002556 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40021000 	.word	0x40021000
 8002564:	40007000 	.word	0x40007000
 8002568:	42420060 	.word	0x42420060

0800256c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e0d0      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002580:	4b6a      	ldr	r3, [pc, #424]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d910      	bls.n	80025b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258e:	4b67      	ldr	r3, [pc, #412]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f023 0207 	bic.w	r2, r3, #7
 8002596:	4965      	ldr	r1, [pc, #404]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	4313      	orrs	r3, r2
 800259c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800259e:	4b63      	ldr	r3, [pc, #396]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d001      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e0b8      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d020      	beq.n	80025fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025c8:	4b59      	ldr	r3, [pc, #356]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	4a58      	ldr	r2, [pc, #352]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80025ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0308 	and.w	r3, r3, #8
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025e0:	4b53      	ldr	r3, [pc, #332]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	4a52      	ldr	r2, [pc, #328]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80025e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ec:	4b50      	ldr	r3, [pc, #320]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	494d      	ldr	r1, [pc, #308]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d040      	beq.n	800268c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d107      	bne.n	8002622 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002612:	4b47      	ldr	r3, [pc, #284]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d115      	bne.n	800264a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e07f      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d107      	bne.n	800263a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800262a:	4b41      	ldr	r3, [pc, #260]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d109      	bne.n	800264a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e073      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263a:	4b3d      	ldr	r3, [pc, #244]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e06b      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800264a:	4b39      	ldr	r3, [pc, #228]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f023 0203 	bic.w	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	4936      	ldr	r1, [pc, #216]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 8002658:	4313      	orrs	r3, r2
 800265a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800265c:	f7ff fa2c 	bl	8001ab8 <HAL_GetTick>
 8002660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002662:	e00a      	b.n	800267a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002664:	f7ff fa28 	bl	8001ab8 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002672:	4293      	cmp	r3, r2
 8002674:	d901      	bls.n	800267a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e053      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267a:	4b2d      	ldr	r3, [pc, #180]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f003 020c 	and.w	r2, r3, #12
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	429a      	cmp	r2, r3
 800268a:	d1eb      	bne.n	8002664 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800268c:	4b27      	ldr	r3, [pc, #156]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d210      	bcs.n	80026bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269a:	4b24      	ldr	r3, [pc, #144]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f023 0207 	bic.w	r2, r3, #7
 80026a2:	4922      	ldr	r1, [pc, #136]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026aa:	4b20      	ldr	r3, [pc, #128]	; (800272c <HAL_RCC_ClockConfig+0x1c0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e032      	b.n	8002722 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d008      	beq.n	80026da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c8:	4b19      	ldr	r3, [pc, #100]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	4916      	ldr	r1, [pc, #88]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d009      	beq.n	80026fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026e6:	4b12      	ldr	r3, [pc, #72]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	490e      	ldr	r1, [pc, #56]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026fa:	f000 f821 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 80026fe:	4602      	mov	r2, r0
 8002700:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	091b      	lsrs	r3, r3, #4
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	490a      	ldr	r1, [pc, #40]	; (8002734 <HAL_RCC_ClockConfig+0x1c8>)
 800270c:	5ccb      	ldrb	r3, [r1, r3]
 800270e:	fa22 f303 	lsr.w	r3, r2, r3
 8002712:	4a09      	ldr	r2, [pc, #36]	; (8002738 <HAL_RCC_ClockConfig+0x1cc>)
 8002714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002716:	4b09      	ldr	r3, [pc, #36]	; (800273c <HAL_RCC_ClockConfig+0x1d0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff f98a 	bl	8001a34 <HAL_InitTick>

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40022000 	.word	0x40022000
 8002730:	40021000 	.word	0x40021000
 8002734:	0800304c 	.word	0x0800304c
 8002738:	20000058 	.word	0x20000058
 800273c:	2000005c 	.word	0x2000005c

08002740 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002746:	2300      	movs	r3, #0
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	2300      	movs	r3, #0
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	2300      	movs	r3, #0
 8002754:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800275a:	4b1e      	ldr	r3, [pc, #120]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	2b04      	cmp	r3, #4
 8002768:	d002      	beq.n	8002770 <HAL_RCC_GetSysClockFreq+0x30>
 800276a:	2b08      	cmp	r3, #8
 800276c:	d003      	beq.n	8002776 <HAL_RCC_GetSysClockFreq+0x36>
 800276e:	e027      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002770:	4b19      	ldr	r3, [pc, #100]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002772:	613b      	str	r3, [r7, #16]
      break;
 8002774:	e027      	b.n	80027c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	0c9b      	lsrs	r3, r3, #18
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	4a17      	ldr	r2, [pc, #92]	; (80027dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002780:	5cd3      	ldrb	r3, [r2, r3]
 8002782:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d010      	beq.n	80027b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800278e:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	0c5b      	lsrs	r3, r3, #17
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	4a11      	ldr	r2, [pc, #68]	; (80027e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800279a:	5cd3      	ldrb	r3, [r2, r3]
 800279c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a0d      	ldr	r2, [pc, #52]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80027a2:	fb02 f203 	mul.w	r2, r2, r3
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	e004      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a0c      	ldr	r2, [pc, #48]	; (80027e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027b4:	fb02 f303 	mul.w	r3, r2, r3
 80027b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	613b      	str	r3, [r7, #16]
      break;
 80027be:	e002      	b.n	80027c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80027c2:	613b      	str	r3, [r7, #16]
      break;
 80027c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027c6:	693b      	ldr	r3, [r7, #16]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	371c      	adds	r7, #28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40021000 	.word	0x40021000
 80027d8:	007a1200 	.word	0x007a1200
 80027dc:	0800305c 	.word	0x0800305c
 80027e0:	0800306c 	.word	0x0800306c
 80027e4:	003d0900 	.word	0x003d0900

080027e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027f0:	4b0a      	ldr	r3, [pc, #40]	; (800281c <RCC_Delay+0x34>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a0a      	ldr	r2, [pc, #40]	; (8002820 <RCC_Delay+0x38>)
 80027f6:	fba2 2303 	umull	r2, r3, r2, r3
 80027fa:	0a5b      	lsrs	r3, r3, #9
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	fb02 f303 	mul.w	r3, r2, r3
 8002802:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002804:	bf00      	nop
  }
  while (Delay --);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	1e5a      	subs	r2, r3, #1
 800280a:	60fa      	str	r2, [r7, #12]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1f9      	bne.n	8002804 <RCC_Delay+0x1c>
}
 8002810:	bf00      	nop
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr
 800281c:	20000058 	.word	0x20000058
 8002820:	10624dd3 	.word	0x10624dd3

08002824 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e041      	b.n	80028ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d106      	bne.n	8002850 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7fe ff64 	bl	8001718 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3304      	adds	r3, #4
 8002860:	4619      	mov	r1, r3
 8002862:	4610      	mov	r0, r2
 8002864:	f000 fa56 	bl	8002d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d001      	beq.n	80028dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e035      	b.n	8002948 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0201 	orr.w	r2, r2, #1
 80028f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a16      	ldr	r2, [pc, #88]	; (8002954 <HAL_TIM_Base_Start_IT+0x90>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d009      	beq.n	8002912 <HAL_TIM_Base_Start_IT+0x4e>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002906:	d004      	beq.n	8002912 <HAL_TIM_Base_Start_IT+0x4e>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a12      	ldr	r2, [pc, #72]	; (8002958 <HAL_TIM_Base_Start_IT+0x94>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d111      	bne.n	8002936 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2b06      	cmp	r3, #6
 8002922:	d010      	beq.n	8002946 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 0201 	orr.w	r2, r2, #1
 8002932:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002934:	e007      	b.n	8002946 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f042 0201 	orr.w	r2, r2, #1
 8002944:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40012c00 	.word	0x40012c00
 8002958:	40000400 	.word	0x40000400

0800295c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d020      	beq.n	80029c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d01b      	beq.n	80029c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f06f 0202 	mvn.w	r2, #2
 8002990:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f998 	bl	8002cdc <HAL_TIM_IC_CaptureCallback>
 80029ac:	e005      	b.n	80029ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f98b 	bl	8002cca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f99a 	bl	8002cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d020      	beq.n	8002a0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d01b      	beq.n	8002a0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f06f 0204 	mvn.w	r2, #4
 80029dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2202      	movs	r2, #2
 80029e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f972 	bl	8002cdc <HAL_TIM_IC_CaptureCallback>
 80029f8:	e005      	b.n	8002a06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f965 	bl	8002cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f974 	bl	8002cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d020      	beq.n	8002a58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d01b      	beq.n	8002a58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 0208 	mvn.w	r2, #8
 8002a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f94c 	bl	8002cdc <HAL_TIM_IC_CaptureCallback>
 8002a44:	e005      	b.n	8002a52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f93f 	bl	8002cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f94e 	bl	8002cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f003 0310 	and.w	r3, r3, #16
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d020      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f003 0310 	and.w	r3, r3, #16
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d01b      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f06f 0210 	mvn.w	r2, #16
 8002a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2208      	movs	r2, #8
 8002a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f926 	bl	8002cdc <HAL_TIM_IC_CaptureCallback>
 8002a90:	e005      	b.n	8002a9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f919 	bl	8002cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f928 	bl	8002cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00c      	beq.n	8002ac8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d007      	beq.n	8002ac8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0201 	mvn.w	r2, #1
 8002ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7fe fc94 	bl	80013f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00c      	beq.n	8002aec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d007      	beq.n	8002aec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 fa6f 	bl	8002fca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00c      	beq.n	8002b10 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d007      	beq.n	8002b10 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f8f8 	bl	8002d00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f003 0320 	and.w	r3, r3, #32
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00c      	beq.n	8002b34 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f003 0320 	and.w	r3, r3, #32
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d007      	beq.n	8002b34 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f06f 0220 	mvn.w	r2, #32
 8002b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 fa42 	bl	8002fb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b34:	bf00      	nop
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b46:	2300      	movs	r3, #0
 8002b48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_TIM_ConfigClockSource+0x1c>
 8002b54:	2302      	movs	r3, #2
 8002b56:	e0b4      	b.n	8002cc2 <HAL_TIM_ConfigClockSource+0x186>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2202      	movs	r2, #2
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b90:	d03e      	beq.n	8002c10 <HAL_TIM_ConfigClockSource+0xd4>
 8002b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b96:	f200 8087 	bhi.w	8002ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8002b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b9e:	f000 8086 	beq.w	8002cae <HAL_TIM_ConfigClockSource+0x172>
 8002ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba6:	d87f      	bhi.n	8002ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ba8:	2b70      	cmp	r3, #112	; 0x70
 8002baa:	d01a      	beq.n	8002be2 <HAL_TIM_ConfigClockSource+0xa6>
 8002bac:	2b70      	cmp	r3, #112	; 0x70
 8002bae:	d87b      	bhi.n	8002ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bb0:	2b60      	cmp	r3, #96	; 0x60
 8002bb2:	d050      	beq.n	8002c56 <HAL_TIM_ConfigClockSource+0x11a>
 8002bb4:	2b60      	cmp	r3, #96	; 0x60
 8002bb6:	d877      	bhi.n	8002ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bb8:	2b50      	cmp	r3, #80	; 0x50
 8002bba:	d03c      	beq.n	8002c36 <HAL_TIM_ConfigClockSource+0xfa>
 8002bbc:	2b50      	cmp	r3, #80	; 0x50
 8002bbe:	d873      	bhi.n	8002ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bc0:	2b40      	cmp	r3, #64	; 0x40
 8002bc2:	d058      	beq.n	8002c76 <HAL_TIM_ConfigClockSource+0x13a>
 8002bc4:	2b40      	cmp	r3, #64	; 0x40
 8002bc6:	d86f      	bhi.n	8002ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bc8:	2b30      	cmp	r3, #48	; 0x30
 8002bca:	d064      	beq.n	8002c96 <HAL_TIM_ConfigClockSource+0x15a>
 8002bcc:	2b30      	cmp	r3, #48	; 0x30
 8002bce:	d86b      	bhi.n	8002ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bd0:	2b20      	cmp	r3, #32
 8002bd2:	d060      	beq.n	8002c96 <HAL_TIM_ConfigClockSource+0x15a>
 8002bd4:	2b20      	cmp	r3, #32
 8002bd6:	d867      	bhi.n	8002ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d05c      	beq.n	8002c96 <HAL_TIM_ConfigClockSource+0x15a>
 8002bdc:	2b10      	cmp	r3, #16
 8002bde:	d05a      	beq.n	8002c96 <HAL_TIM_ConfigClockSource+0x15a>
 8002be0:	e062      	b.n	8002ca8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6818      	ldr	r0, [r3, #0]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	6899      	ldr	r1, [r3, #8]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f000 f96a 	bl	8002eca <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	609a      	str	r2, [r3, #8]
      break;
 8002c0e:	e04f      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6818      	ldr	r0, [r3, #0]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	6899      	ldr	r1, [r3, #8]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f000 f953 	bl	8002eca <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c32:	609a      	str	r2, [r3, #8]
      break;
 8002c34:	e03c      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6818      	ldr	r0, [r3, #0]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	6859      	ldr	r1, [r3, #4]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	461a      	mov	r2, r3
 8002c44:	f000 f8ca 	bl	8002ddc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2150      	movs	r1, #80	; 0x50
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 f921 	bl	8002e96 <TIM_ITRx_SetConfig>
      break;
 8002c54:	e02c      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	6859      	ldr	r1, [r3, #4]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	461a      	mov	r2, r3
 8002c64:	f000 f8e8 	bl	8002e38 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2160      	movs	r1, #96	; 0x60
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 f911 	bl	8002e96 <TIM_ITRx_SetConfig>
      break;
 8002c74:	e01c      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	6859      	ldr	r1, [r3, #4]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	461a      	mov	r2, r3
 8002c84:	f000 f8aa 	bl	8002ddc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2140      	movs	r1, #64	; 0x40
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 f901 	bl	8002e96 <TIM_ITRx_SetConfig>
      break;
 8002c94:	e00c      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4610      	mov	r0, r2
 8002ca2:	f000 f8f8 	bl	8002e96 <TIM_ITRx_SetConfig>
      break;
 8002ca6:	e003      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	73fb      	strb	r3, [r7, #15]
      break;
 8002cac:	e000      	b.n	8002cb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002cae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr

08002cee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr

08002d00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr
	...

08002d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a2b      	ldr	r2, [pc, #172]	; (8002dd4 <TIM_Base_SetConfig+0xc0>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d007      	beq.n	8002d3c <TIM_Base_SetConfig+0x28>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d32:	d003      	beq.n	8002d3c <TIM_Base_SetConfig+0x28>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a28      	ldr	r2, [pc, #160]	; (8002dd8 <TIM_Base_SetConfig+0xc4>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d108      	bne.n	8002d4e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a20      	ldr	r2, [pc, #128]	; (8002dd4 <TIM_Base_SetConfig+0xc0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d007      	beq.n	8002d66 <TIM_Base_SetConfig+0x52>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d5c:	d003      	beq.n	8002d66 <TIM_Base_SetConfig+0x52>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a1d      	ldr	r2, [pc, #116]	; (8002dd8 <TIM_Base_SetConfig+0xc4>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d108      	bne.n	8002d78 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a0d      	ldr	r2, [pc, #52]	; (8002dd4 <TIM_Base_SetConfig+0xc0>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d103      	bne.n	8002dac <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d005      	beq.n	8002dca <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	f023 0201 	bic.w	r2, r3, #1
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	611a      	str	r2, [r3, #16]
  }
}
 8002dca:	bf00      	nop
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr
 8002dd4:	40012c00 	.word	0x40012c00
 8002dd8:	40000400 	.word	0x40000400

08002ddc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b087      	sub	sp, #28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	f023 0201 	bic.w	r2, r3, #1
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f023 030a 	bic.w	r3, r3, #10
 8002e18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	621a      	str	r2, [r3, #32]
}
 8002e2e:	bf00      	nop
 8002e30:	371c      	adds	r7, #28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr

08002e38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	f023 0210 	bic.w	r2, r3, #16
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	031b      	lsls	r3, r3, #12
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e74:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	621a      	str	r2, [r3, #32]
}
 8002e8c:	bf00      	nop
 8002e8e:	371c      	adds	r7, #28
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr

08002e96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b085      	sub	sp, #20
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f043 0307 	orr.w	r3, r3, #7
 8002eb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	609a      	str	r2, [r3, #8]
}
 8002ec0:	bf00      	nop
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc80      	pop	{r7}
 8002ec8:	4770      	bx	lr

08002eca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b087      	sub	sp, #28
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
 8002ed6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ee4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	021a      	lsls	r2, r3, #8
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	431a      	orrs	r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	609a      	str	r2, [r3, #8]
}
 8002efe:	bf00      	nop
 8002f00:	371c      	adds	r7, #28
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr

08002f08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e041      	b.n	8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a14      	ldr	r2, [pc, #80]	; (8002fb0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d009      	beq.n	8002f78 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f6c:	d004      	beq.n	8002f78 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a10      	ldr	r2, [pc, #64]	; (8002fb4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d10c      	bne.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40012c00 	.word	0x40012c00
 8002fb4:	40000400 	.word	0x40000400

08002fb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr

08002fca <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr

08002fdc <__libc_init_array>:
 8002fdc:	b570      	push	{r4, r5, r6, lr}
 8002fde:	2600      	movs	r6, #0
 8002fe0:	4d0c      	ldr	r5, [pc, #48]	; (8003014 <__libc_init_array+0x38>)
 8002fe2:	4c0d      	ldr	r4, [pc, #52]	; (8003018 <__libc_init_array+0x3c>)
 8002fe4:	1b64      	subs	r4, r4, r5
 8002fe6:	10a4      	asrs	r4, r4, #2
 8002fe8:	42a6      	cmp	r6, r4
 8002fea:	d109      	bne.n	8003000 <__libc_init_array+0x24>
 8002fec:	f000 f822 	bl	8003034 <_init>
 8002ff0:	2600      	movs	r6, #0
 8002ff2:	4d0a      	ldr	r5, [pc, #40]	; (800301c <__libc_init_array+0x40>)
 8002ff4:	4c0a      	ldr	r4, [pc, #40]	; (8003020 <__libc_init_array+0x44>)
 8002ff6:	1b64      	subs	r4, r4, r5
 8002ff8:	10a4      	asrs	r4, r4, #2
 8002ffa:	42a6      	cmp	r6, r4
 8002ffc:	d105      	bne.n	800300a <__libc_init_array+0x2e>
 8002ffe:	bd70      	pop	{r4, r5, r6, pc}
 8003000:	f855 3b04 	ldr.w	r3, [r5], #4
 8003004:	4798      	blx	r3
 8003006:	3601      	adds	r6, #1
 8003008:	e7ee      	b.n	8002fe8 <__libc_init_array+0xc>
 800300a:	f855 3b04 	ldr.w	r3, [r5], #4
 800300e:	4798      	blx	r3
 8003010:	3601      	adds	r6, #1
 8003012:	e7f2      	b.n	8002ffa <__libc_init_array+0x1e>
 8003014:	08003070 	.word	0x08003070
 8003018:	08003070 	.word	0x08003070
 800301c:	08003070 	.word	0x08003070
 8003020:	08003074 	.word	0x08003074

08003024 <memset>:
 8003024:	4603      	mov	r3, r0
 8003026:	4402      	add	r2, r0
 8003028:	4293      	cmp	r3, r2
 800302a:	d100      	bne.n	800302e <memset+0xa>
 800302c:	4770      	bx	lr
 800302e:	f803 1b01 	strb.w	r1, [r3], #1
 8003032:	e7f9      	b.n	8003028 <memset+0x4>

08003034 <_init>:
 8003034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003036:	bf00      	nop
 8003038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800303a:	bc08      	pop	{r3}
 800303c:	469e      	mov	lr, r3
 800303e:	4770      	bx	lr

08003040 <_fini>:
 8003040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003042:	bf00      	nop
 8003044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003046:	bc08      	pop	{r3}
 8003048:	469e      	mov	lr, r3
 800304a:	4770      	bx	lr
